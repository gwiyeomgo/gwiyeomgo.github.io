"use strict";(self.webpackChunkgwiyeom_blog=self.webpackChunkgwiyeom_blog||[]).push([[5473],{5259:function(e,l,n){n.r(l),n.d(l,{Head:function(){return E.p},default:function(){return m}});var t=n(6540),r=n(8453);function c(e){const l=Object.assign({h3:"h3",p:"p",br:"br",code:"code",hr:"hr",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",pre:"pre",ul:"ul",li:"li"},(0,r.RP)(),e.components);return t.createElement(t.Fragment,null,t.createElement(l.h3,null,"배경"),"\n",t.createElement(l.p,null,"새로운 프로젝트를 시작했다.",t.createElement(l.br),"\n","DB 설계를 하시면서 작은 숫자 유형을 ",t.createElement(l.code,null,"TINYINT"),"로 쓰자고 하셨다.",t.createElement(l.br),"\n","기존 Golang 코드에는 ",t.createElement(l.code,null,"bool")," 타입으로 사용했었는데\nDB에는 왜 굳이 ",t.createElement(l.code,null,"TINYINT"),"를 쓰는 걸까 궁금했다."),"\n",t.createElement(l.p,null,"그래서 간단히 정리해봤다."),"\n",t.createElement(l.hr),"\n",t.createElement(l.h3,null,"1. MySQL에서는 다양한 정수 타입"),"\n",t.createElement(l.p,null,"MySQL에서는 다양한 정수 타입을 제공한다.",t.createElement(l.br),"\n","각 타입은 저장할 수 있는 숫자의 범위와 차지하는 바이트 수가 다르다."),"\n",t.createElement(l.table,null,t.createElement(l.thead,null,t.createElement(l.tr,null,t.createElement(l.th,null,"타입"),t.createElement(l.th,null,"바이트"),t.createElement(l.th,null,"범위 (SIGNED)"),t.createElement(l.th,null,"범위 (UNSIGNED)"))),t.createElement(l.tbody,null,t.createElement(l.tr,null,t.createElement(l.td,null,"TINYINT"),t.createElement(l.td,null,"1"),t.createElement(l.td,null,"-128 ~ 127"),t.createElement(l.td,null,"0 ~ 255")),t.createElement(l.tr,null,t.createElement(l.td,null,"SMALLINT"),t.createElement(l.td,null,"2"),t.createElement(l.td,null,"-32,768 ~ 32,767"),t.createElement(l.td,null,"0 ~ 65,535")),t.createElement(l.tr,null,t.createElement(l.td,null,"INT"),t.createElement(l.td,null,"4"),t.createElement(l.td,null,"약 -21억 ~ 21억"),t.createElement(l.td,null,"0 ~ 약 42억")),t.createElement(l.tr,null,t.createElement(l.td,null,"BIGINT"),t.createElement(l.td,null,"8"),t.createElement(l.td,null,"약 ±9경"),t.createElement(l.td,null,"0 ~ 약 18경")))),"\n",t.createElement(l.p,null,"→ 이처럼 ",t.createElement(l.code,null,"TINYINT"),"는 아주 작은 숫자를 저장할 때 유용하다.",t.createElement(l.br),"\n","→ 필요 이상으로 큰 타입을 쓰면 공간 낭비가 발생한다.ㅌㅋ"),"\n",t.createElement(l.h3,null,"2. ",t.createElement(l.code,null,"BIGINT"),", ",t.createElement(l.code,null,"TINYINT"),"의 차이점은?"),"\n",t.createElement(l.p,null,"MySQL에는 ",t.createElement(l.code,null,"BOOLEAN")," 타입이 있지만 내부적으로는 그냥 ",t.createElement(l.code,null,"TINYINT(1)"),"로 처리된다."),"\n",t.createElement(l.pre,null,t.createElement(l.code,null,"ALTER TABLE members ADD COLUMN promotion_agreed BOOLEAN NOT NULL DEFAULT TRUE;\n")),"\n",t.createElement(l.p,null,"실제 테이블에서는 이렇게 보인다 Type: tinyint(1)이다\n즉, ",t.createElement(l.code,null,"BOOLEAN"),"은 단순한 alias일 뿐 결국 저장은 ",t.createElement(l.code,null,"TINYINT"),"로 된다.\n그래서 많은 경우 그냥 ",t.createElement(l.code,null,"TINYINT(1)"),"을 직접 쓰기도 한다."),"\n",t.createElement(l.h3,null,"3. 실제 사용 코드"),"\n",t.createElement(l.p,null,"기존 Golang 코드에서는 이런 식으로 되어 있었다:"),"\n",t.createElement(l.pre,null,t.createElement(l.code,null,'type Member struct {\n  PromotionAgreed bool `db:"promotion_agreed"`\n}\n')),"\n",t.createElement(l.p,null,"그리고 MySQL에는 다음과 같이 생성했다:"),"\n",t.createElement(l.pre,null,t.createElement(l.code,null,"ALTER TABLE members ADD COLUMN promotion_agreed TINYINT(1) NOT NULL DEFAULT 1;\n")),"\n",t.createElement(l.p,null,"Golang의 ",t.createElement(l.code,null,"bool")," 타입과 MySQL의 ",t.createElement(l.code,null,"TINYINT(1)"),"는 자연스럽게 매핑된다.",t.createElement(l.br),"\n","ORM이나 드라이버들이 알아서 ",t.createElement(l.code,null,"0 ↔ false"),", ",t.createElement(l.code,null,"1 ↔ true"),"로 변환"),"\n",t.createElement(l.hr),"\n",t.createElement(l.h3,null,"4. 결론"),"\n",t.createElement(l.ul,null,"\n",t.createElement(l.li,null,t.createElement(l.code,null,"TINYINT"),"는 아주 작은 숫자(특히 0 또는 1)를 저장할 때 메모리를 절약할 수 있다."),"\n",t.createElement(l.li,null,t.createElement(l.code,null,"BOOLEAN"),"도 결국 ",t.createElement(l.code,null,"TINYINT(1)"),"로 처리되므로 사실상 동일하다."),"\n",t.createElement(l.li,null,t.createElement(l.code,null,"bool"),"을 다루는 대부분의 코드에서 DB에는 ",t.createElement(l.code,null,"TINYINT(1)"),"을 쓰는 게 일반적이다."),"\n",t.createElement(l.li,null,"큰 수가 필요하지 않다면, 작은 타입을 쓰는 습관이 성능과 유지보수에 좋다!"),"\n"),"\n",t.createElement(l.hr),"\n",t.createElement(l.p,null,"처음엔 BOOLEAN 타입이 있으니 그냥 쓰면 되는 줄 알았다.\n근데 알고 보니 MySQL에서는 BOOLEAN도 결국 TINYINT(1)로 저장된다고 한다.\nMySQL의 BOOLEAN은 사실 0과 1뿐 아니라 다른 숫자도 들어갈 수 있어서\n참/거짓만 다루는 진짜 불리언 타입은 아니다\n제약 조건 없이 아무 숫자나 들어가서 오용될 수 있다고 한다!\n그래서 차라리 혼동을 줄이고 명확하게 표현하기 위해\n처음부터 TINYINT(1)을 쓰는 게 더 실용적이다"))}var a=function(e){void 0===e&&(e={});const{wrapper:l}=Object.assign({},(0,r.RP)(),e.components);return l?t.createElement(l,e,t.createElement(c,e)):c(e)},E=n(7292);function m(e){return t.createElement(E.A,e,t.createElement(a,e))}E.A}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-database-mysql-2025-04-08-mysql-tinyint-mdx-e2644ca606c9a015d8fc.js.map