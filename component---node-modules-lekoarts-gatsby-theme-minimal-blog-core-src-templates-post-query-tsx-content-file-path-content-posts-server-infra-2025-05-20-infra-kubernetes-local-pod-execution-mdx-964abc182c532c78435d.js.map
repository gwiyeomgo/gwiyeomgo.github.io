{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-infra-2025-05-20-infra-kubernetes-local-pod-execution-mdx-964abc182c532c78435d.js","mappings":"mNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,KAAM,OACNC,IAAK,QACJC,EAAAA,EAAAA,MAAsBX,EAAMY,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBZ,EAAYG,GAAI,KAAM,MAAO,KAAMS,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,uFAAwF,KAAMQ,EAAAA,cAAoBZ,EAAYG,GAAI,KAAM,qCAAsC,KAAMS,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,+DAAgE,KAAMQ,EAAAA,cAAoBZ,EAAYK,GAAI,CACtdQ,MAAO,KACN,KAAMD,EAAAA,cAAoBZ,EAAYM,GAAI,KAAM,8DAA+D,MAAO,KAAMM,EAAAA,cAAoBZ,EAAYO,GAAI,KAAM,KAAMK,EAAAA,cAAoBZ,EAAYM,GAAI,KAAM,wBAAyBM,EAAAA,cAAoBZ,EAAYQ,KAAM,KAAM,kEAAmE,MAAO,KAAMI,EAAAA,cAAoBZ,EAAYK,GAAI,CAChZQ,MAAO,KACN,KAAMD,EAAAA,cAAoBZ,EAAYM,GAAI,KAAM,+BAAgC,MAAO,KAAMM,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,wCAAyC,KAAMQ,EAAAA,cAAoBZ,EAAYS,IAAK,KAAMG,EAAAA,cAAoBZ,EAAYQ,KAAM,KAAM,wpCAAypC,KAAMI,EAAAA,cAAoBZ,EAAYK,GAAI,CACh9CQ,MAAO,KACN,KAAMD,EAAAA,cAAoBZ,EAAYM,GAAI,KAAM,KAAMM,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,kHAAmHQ,EAAAA,cAAoBZ,EAAYQ,KAAM,KAAM,8GAA+G,wHAA2H,MAAO,KAAMI,EAAAA,cAAoBZ,EAAYM,GAAI,KAAM,KAAMM,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,2CAA4C,MAAO,MAAO,KAAMQ,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,4CAA6C,KAAMQ,EAAAA,cAAoBZ,EAAYK,GAAI,CAC/wBQ,MAAO,KACN,KAAMD,EAAAA,cAAoBZ,EAAYM,GAAI,KAAM,iCAAkC,MAAO,KAAMM,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,2DAA4D,KAAMQ,EAAAA,cAAoBZ,EAAYS,IAAK,KAAMG,EAAAA,cAAoBZ,EAAYQ,KAAM,KAAM,sUAAuU,KAAMI,EAAAA,cAAoBZ,EAAYS,IAAK,KAAMG,EAAAA,cAAoBZ,EAAYQ,KAAM,KAAM,gOAC1sB,CAKA,MAJA,SAAoBT,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOe,QAASC,GAAad,OAAOC,OAAO,CAAC,GAAGQ,EAAAA,EAAAA,MAAsBX,EAAMY,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWhB,EAAOa,EAAAA,cAAoBd,EAAmBC,IAAUD,EAAkBC,EAC9H,E,UCtBe,SAASiB,EAAiBjB,GACvC,OAAOa,EAAAA,cAAoBK,EAAAA,EAAelB,EAAOa,EAAAA,cAAoBM,EAAqBnB,GAC5F,CAHAkB,EAAAA,C","sources":["webpack://gwiyeom-blog/./content/posts/server/infra/2025-05-20-infra-kubernetes-local-pod-execution.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    ol: \"ol\",\n    li: \"li\",\n    ul: \"ul\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"staging 은 쿠버네티스 환경이다\\n젠킨스 파이프라인을 활용해서 docker 이미지를 빌드 push 하고 staging 에\\n앱을 배포하려고 한다\"), \"\\n\", React.createElement(_components.h1, null, \"1. Jenkins로  ECR 이미지로 빌드 파이프라인 작성\"), \"\\n\", React.createElement(_components.p, null, \"젠킨스 CI/CD (지속적 통합/배포)를 위해\\n자동화 파이프라인을 반복적이고 신뢰성 있게 실행해주는 도구\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"2\"\n  }, \"\\n\", React.createElement(_components.li, null, \"AWS ECR에서 리포지토리를 만들기\\nECR에서 a-service 레포지토리 UI로 생성 되어 있어야함\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"ECR 전체 레포지토리 URL 형식\\n\", React.createElement(_components.code, null, \"<account_id>.dkr.ecr.<region>.amazonaws.com/<repository-name>\")), \"\\n\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"2\"\n  }, \"\\n\", React.createElement(_components.li, null, \"잡에 item 새로 생성하고 파이프라인을 작성한다\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"젠킨스에서 job 에 newItem 추가 후 pipeline 추가\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"pipeline {\\n    agent any\\n    stages {\\n        stage('Checkout') { //GitLab에서 원하는 브랜치로 코드 clone\\n            steps {\\n                git branch: \\\"${params.BRANCH}\\\",\\n                credentialsId: 'u',\\n                url: 'git@gitlab.org:test/a-service.git'\\n            }\\n        }\\n        stage('Build image') {  //Docker로 이미지 빌드 (태그 붙여서)\\n            steps {\\n                script {\\n                    app = docker.build(\\\"12345678910.dkr.ecr.ap-northeast-2.amazonaws.com/test-a-service:R-${params.TAG}\\\")\\n                }\\n            }\\n        }\\n\\n        stage('Push image') { //AWS ECR에 이미지 push (docker login + push 자동 처리)\\n            steps {\\n            \\tscript {\\n                    docker.withRegistry('https://12345678910.dkr.ecr.ap-northeast-2.amazonaws.com/test-a-service', 'ecr:ap-northeast-2:AWS Beanstalk Deploy') {\\n               app.push(\\\"R-${params.TAG}\\\")\\n                \\t}\\n            \\t}\\n            }\\n        }\\n\\n        stage('Deploy') { //원하는 배포 방식으로 서비스 배포 (kubectl apply, helm upgrade 등 가능)\\n            steps {\\n            \\tscript {\\n            \\t   ....\\n            \\t}\\n            }\\n        }\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.ol, {\n    start: \"3\"\n  }, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"gitLab 접속을 위한 설정 필요\\ngitLab code 를 받아서 빌드시켜 이미지를 만들어야 하기 때문에\\nGitLab SSH key 등록됨 (Deploy Key or User SSH Key)\\n\", React.createElement(_components.code, null, \"You're using 'Known hosts file' strategy to verify ssh host keys, but your known_hosts file does not exist\"), \"\\nGitLab 쪽 해당 저장소에는 Jenkins의 SSH 공개키가 등록되어 있지 않아서 \\\"접근 권한 없음\\\"\\nGitLab 접속 해당 저장소 → Settings > Repository → Deploy Keys\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Jenkins Credentials 에 gitlab-ssh-key 등록\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"개발 서버의 jenkins 도커 인스턴스 안에 생성된 id_rsa키 등록\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"5\"\n  }, \"\\n\", React.createElement(_components.li, null, \"배포할 브랜치에 Dockerfile 포함되어 있어야함\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"stage('Deploy') 수행하여\\n개발서버의 Kubernetes 클러스터에서 Pod가 실행 중\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"[ Git (GitLab) ]\\n        │\\n        ↓  [Jenkins 'Clone' 단계: git clone]\\n[ Jenkins / CI 서버 ]\\n        │\\n        ↓  [Jenkins 'Build image': docker build]\\n[ Docker 이미지 생성 ]\\n        │\\n        ↓  [Jenkins 'Push image': docker push]\\n[ AWS ECR 저장소 ]\\n        │\\n        ↓  [Jenkins 'Deploy': 배포 명령 실행]\\n[ 쿠버네티스 개발 클러스터 ]\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"[ EC2 (내 컴퓨터 역할) ]\\n└─ Jenkins\\n└─ git clone (from GitLab)\\n└─ docker build\\n└─ docker push → [ECR]\\n└─ kubectl apply → [EKS]\\n\\n[ECR (이미지 저장소)] ← Jenkins Push\\n↑\\n│\\n[EKS (Kubernetes)] ← 이미지 Pull\\n└─ Pod 실행 (컨테이너 기반)\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/server/infra/2025-05-20-infra-kubernetes-local-pod-execution.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","ol","li","ul","code","pre","_provideComponents","components","React","start","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}