"use strict";(self.webpackChunkgwiyeom_blog=self.webpackChunkgwiyeom_blog||[]).push([[5001],{929:function(e,l,n){n.r(l),n.d(l,{Head:function(){return c.p},default:function(){return u}});var t=n(6540),a=n(8453);function m(e){const l=Object.assign({h1:"h1",p:"p",pre:"pre",code:"code",blockquote:"blockquote",ul:"ul",li:"li"},(0,a.RP)(),e.components);return t.createElement(t.Fragment,null,t.createElement(l.h1,null,"배경"),"\n",t.createElement(l.p,null,"개발서버에서 젠킨스를 활용해\nECR 이미지를 빌드 후 배포 했지만 컨테이너가 실행 되지 않았다\n담당자님께 확인해보니\n새로운 앱이 적용되면 helm 설정을 변경해야 한다고 한다"),"\n",t.createElement(l.pre,null,t.createElement(l.code,null,"개발서버 로그인 후\n ~/k8s/helm 가서 templates\n  templates에 새로운 app에 대한 file 생성 및 기타 파일 업로드 해야해요 ..\n")),"\n",t.createElement(l.p,null,"왜?어떻게 바꾸는거지?"),"\n",t.createElement(l.h1,null,"일단.. 용어부터 이해해보자.."),"\n",t.createElement(l.blockquote,null,"\n",t.createElement(l.p,null,"Helm이란? -> 배달앱.."),"\n"),"\n",t.createElement(l.p,null,'Kubernetes에서 앱을 쉽고 안정적으로 배포할 수 있게 해주는 도구\nKubernetes의 "패키지 매니저" (apt, yum, brew 같은 역할)'),"\n",t.createElement(l.blockquote,null,"\n",t.createElement(l.p,null,"Helm Chart란? -> 왜 피자 세트?? ->여러 리소스를 세트로 묶어서 설치해줌"),"\n"),"\n",t.createElement(l.p,null,"Helm이 사용하는 앱 설치용 패키지 묶음\n여러 개의 Kubernetes YAML 파일 + 설정값(template)으로 구성된 앱 배포 템플릿"),"\n",t.createElement(l.p,null,"로컬에서\n",t.createElement(l.code,null,"helm pull bitnami/mysql --untar")," 실행시  mysql 폴더 생겼고"),"\n",t.createElement(l.pre,null,t.createElement(l.code,null,"mysql/\n├── Chart.yaml # 이 Helm Chart의 기본 정보 (이름, 버전, 설명 등)\n├── values.yaml  # 이 Helm Chart에 넘길 수 있는 기본 설정값들\n├── templates/  # 실제 쿠버네티스 리소스 템플릿들이 들어 있음\n│   ├── deployment.yaml\n│   ├── service.yaml\n│   ├── pvc.yaml\n│   └── ...\n")),"\n",t.createElement(l.h1,null,"그럼 내가 생성한 앱 컨테이너에도 추가할 수 있나?"),"\n",t.createElement(l.h1,null,"이미지 태그 바꾸기"),"\n",t.createElement(l.ul,null,"\n",t.createElement(l.li,null,"Helm Chart에서 명시적으로 관리해야 함 -> 이미지 태그 관리"),"\n"),"\n",t.createElement(l.h1,null,"작업 진행해보니"),"\n",t.createElement(l.pre,null,t.createElement(l.code,null,"work/k8s/helm-test/\n    Chart.yaml\n    values.yaml\n    myApp.yaml -> 이 서비스는 이번 배포에 포함할지 말지 제어 (사람이 직접 추가)\n    templates/\n        ├── a_service\n        ├── b_service\n        │        └──   deployment.yaml hpa.yaml service.yaml\n        └── ...\n")),"\n",t.createElement(l.p,null,"templates 안에 new_service.yaml 을 작성 - 새로운 앱 추가"),"\n",t.createElement(l.ul,null,"\n",t.createElement(l.li,null,"tip ",t.createElement(l.code,null,"replicas")," 동일한 Pod 몇개 실행할지.."),"\n",t.createElement(l.li,null,"tip deployment.yaml : 앱 실행(Pod)을 관리하는 핵심 설정"),"\n",t.createElement(l.li,null,"tip service.yaml:외부/내부에서 Pod에 접근 설정,앱 접속 라우팅"),"\n",t.createElement(l.li,null,"tip hpa.yaml:CPU 사용률, 메모리 사용률 등을 기준으로 Pod 수를 자동으로 조절하는 설정 파일"),"\n"),"\n",t.createElement(l.h1,null,"이걸 수동으로 쓰는건가.."),"\n",t.createElement(l.p,null,"직접 Helm values 파일을 수정하고 배포까지만 해보겠지만..\nTerraform을 쓰면 그 설정과 배포 과정을 전부 코드로 선언해서\n버전 관리 , 자동화  까지 가능??"))}var r=function(e){void 0===e&&(e={});const{wrapper:l}=Object.assign({},(0,a.RP)(),e.components);return l?t.createElement(l,e,t.createElement(m,e)):m(e)},c=n(7292);function u(e){return t.createElement(c.A,e,t.createElement(r,e))}c.A}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-infra-2025-05-22-infra-kubernetes-helm-chart-mdx-7fdf4ec1fa8755c176b9.js.map