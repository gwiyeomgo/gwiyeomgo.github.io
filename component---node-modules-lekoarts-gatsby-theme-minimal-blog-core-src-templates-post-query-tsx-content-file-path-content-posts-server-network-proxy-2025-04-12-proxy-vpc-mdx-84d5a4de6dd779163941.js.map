{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-network-proxy-2025-04-12-proxy-vpc-mdx-84d5a4de6dd779163941.js","mappings":"kNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,KAAM,OACNC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,MAAsBT,EAAMU,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBV,EAAYG,GAAI,KAAM,gBAAiB,KAAMO,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,4FAA6FM,EAAAA,cAAoBV,EAAYK,KAAM,KAAM,mCAAoC,KAAMK,EAAAA,cAAoBV,EAAYM,GAAI,KAAM,KAAMI,EAAAA,cAAoBV,EAAYO,GAAI,KAAM,yEAA0EG,EAAAA,cAAoBV,EAAYK,KAAM,KAAM,2BAA4B,MAAO,KAAMK,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,yDAA0D,KAAMM,EAAAA,cAAoBV,EAAYM,GAAI,CACltBK,MAAO,KACN,KAAMD,EAAAA,cAAoBV,EAAYO,GAAI,KAAM,+EAAgFG,EAAAA,cAAoBV,EAAYK,KAAM,KAAM,mCAAoC,MAAO,KAAMK,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,4KAA6K,KAAMM,EAAAA,cAAoBV,EAAYM,GAAI,CAC9dK,MAAO,KACN,KAAMD,EAAAA,cAAoBV,EAAYO,GAAI,KAAM,gEAAiE,KAAMG,EAAAA,cAAoBV,EAAYO,IAAK,MAAO,KAAMG,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,yCAA0C,KAAMM,EAAAA,cAAoBV,EAAYM,GAAI,CACvSK,MAAO,KACN,KAAMD,EAAAA,cAAoBV,EAAYO,GAAI,KAAM,2DAA4D,MAAO,KAAMG,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,kFAAmF,KAAMM,EAAAA,cAAoBV,EAAYG,GAAI,KAAM,UAAW,KAAMO,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,gCAAiC,KAAMM,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,+LAAgM,KAAMM,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,wGAAyG,KAAMM,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,mIAAoI,KAAMM,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,2DAC9+B,CAKA,MAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOa,QAASC,GAAaZ,OAAOC,OAAO,CAAC,GAAGM,EAAAA,EAAAA,MAAsBT,EAAMU,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWd,EAAOW,EAAAA,cAAoBZ,EAAmBC,IAAUD,EAAkBC,EAC9H,E,UClBe,SAASe,EAAiBf,GACvC,OAAOW,EAAAA,cAAoBK,EAAAA,EAAehB,EAAOW,EAAAA,cAAoBM,EAAqBjB,GAC5F,CAHAgB,EAAAA,C","sources":["webpack://gwiyeom-blog/./content/posts/server/network/proxy/2025-04-12-proxy-vpc.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    ol: \"ol\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"프록시(Proxy)란?\"), \"\\n\", React.createElement(_components.p, null, \"클라이언트와 서버 사이에서 요청을 중계하는 역할을 하는 서버\\n사용자(클라이언트)가 직접 서버에 접속하지 않고, 프록시 서버를 거쳐서 데이터를 주고받는 방식\\n\", React.createElement(_components.code, null, \"사용자 → 프록시 서버 → 웹 서버 (실제 대상 서버)\")), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"순방향 프록시(Forward Proxy)\\n클라이언트(사용자)가 외부 서버에 요청할 때 중간에서 요청을 대신 처리하는 방식\\n\", React.createElement(_components.code, null, \"사용자 → (순방향 프록시) → 웹 서버\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"ex) 기업 네트워크에서 직원들의 인터넷 사용을 제어\\nex) VPN처럼 특정 사이트 우회 접속\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"2\"\n  }, \"\\n\", React.createElement(_components.li, null, \"리버스 프록시(Reverse Proxy)\\n사용자가 서버에 직접 접근하지 않고, 프록시 서버가 요청을 받아 실제 서버로 전달하는 방식\\n\", React.createElement(_components.code, null, \"사용자 → (리버스 프록시) → 웹 서버 (실제 서버)\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"ex) Nginx나 Apache 같은 웹 서버에서 많이 사용\\n류ex) 로드 밸런싱 (Load Balancing) → 트래픽을 여러 서버에 분산하는 기술(행위)/ 로드 밸런싱을 수행하는 로드 밸런서는 리버스 프록시의 한 종\\nex) AWS에서 Nginx를 사용해 웹 트래픽을 여러 서버로 분산하는 경우\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"3\"\n  }, \"\\n\", React.createElement(_components.li, null, \"투명 프록시(Transparent Proxy)\\n사용자가 프록시를 사용하고 있다는 사실을 모르게 하는 프록시\"), \"\\n\", React.createElement(_components.li), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"ex) 기업이나 학교에서 직원·학생들의 인터넷 사용 기록을 모니터링\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"4\"\n  }, \"\\n\", React.createElement(_components.li, null, \"캐시 프록시(Cache Proxy)\\n자주 요청되는 데이터를 캐싱(저장)하여 빠르게 응답하는 프록시\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"ex) CDN(Content Delivery Network)에서 웹 페이지 로딩 속도 향상\\nex) 동일한 요청이 반복될 때 서버 부하 감소\"), \"\\n\", React.createElement(_components.h1, null, \"VPC ??\"), \"\\n\", React.createElement(_components.p, null, \"VPC(Virtual Private Cloud) 는\"), \"\\n\", React.createElement(_components.p, null, \"VPC는 AWS 클라우드 내에서 격리된 가상 네트워크 환경을 제공합니다.\\n이를 통해 사용자는 자신만의 IP 주소 범위, 서브넷, 라우팅 테이블, 인터넷 게이트웨이 등을 설정하여 AWS 리소스들을 관리할 수 있습니다.\\nVPC는 보안과 네트워크 분리를 위해 사용되며,\\n다른 사용자와 리소스 간의 네트워크 트래픽을 제어할 수 있습니다.\"), \"\\n\", React.createElement(_components.p, null, \"AWS(Amazon Web Services) 에서 제공하는 가상 네트워크 서비스로,\\n클라우드 상에서 격리된 네트워크 환경을 생성하여 자원을 안전하게 관리하고 연결할 수 있게 한다\"), \"\\n\", React.createElement(_components.p, null, \"VPC를 사용하면 다양한 네트워크 영역을 분리하여 보안 및 권한 관리를 효율적으로 처리 예를 들어,\\n특정 리소스가 인터넷에 직접 접근하지 못하게 하고\\n, 다른 리소스는 인터넷에 접근할 수 있도록 분리하는 구조를 만들 수 있음\"), \"\\n\", React.createElement(_components.p, null, \"Subnet\\nRoute Table\\nInternet Gateway\\nVPC간 피어링을 설정한다.?\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/server/network/proxy/2025-04-12-proxy-vpc.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","code","ol","li","_provideComponents","components","React","start","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}