{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-golang-2025-05-09-go-type-assertion-mdx-df07bef654653cf47b61.js","mappings":"mNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,KAAM,OACNC,IAAK,QACJC,EAAAA,EAAAA,MAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBT,EAAYG,GAAI,KAAM,MAAO,KAAMM,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,kCAAmCK,EAAAA,cAAoBT,EAAYK,KAAM,KAAM,+BAAgC,mDAAoDI,EAAAA,cAAoBT,EAAYK,KAAM,KAAM,kBAAmB,oCAAqC,KAAMI,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,gEAAiE,KAAMK,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,cAAeK,EAAAA,cAAoBT,EAAYK,KAAM,KAAM,0BAA2B,+DAAgE,KAAMI,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,8BAA+B,KAAMK,EAAAA,cAAoBT,EAAYG,GAAI,KAAM,0BAA2B,KAAMM,EAAAA,cAAoBT,EAAYI,EAAG,KAAMK,EAAAA,cAAoBT,EAAYK,KAAM,KAAM,kBAAmB,uDAAwD,KAAMI,EAAAA,cAAoBT,EAAYG,GAAI,KAAM,OAAQ,KAAMM,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,0BAA2BK,EAAAA,cAAoBT,EAAYK,KAAM,KAAM,+BAAgC,KAAMI,EAAAA,cAAoBT,EAAYG,GAAI,KAAM,gBAAiB,KAAMM,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,oDAAqD,KAAMK,EAAAA,cAAoBT,EAAYM,IAAK,KAAMG,EAAAA,cAAoBT,EAAYK,KAAM,KAAM,mMAA4M,KAAMI,EAAAA,cAAoBT,EAAYG,GAAI,KAAM,uBAAwB,KAAMM,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,oDAAqD,KAAMK,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,kBAAmBK,EAAAA,cAAoBT,EAAYK,KAAM,KAAM,yCAA0C,QAASI,EAAAA,cAAoBT,EAAYK,KAAM,KAAM,yCAA0C,mBAAoB,KAAMI,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,mHAAoH,KAAMK,EAAAA,cAAoBT,EAAYM,IAAK,KAAMG,EAAAA,cAAoBT,EAAYK,KAAM,KAAM,oFACj2E,CAKA,MAJA,SAAoBN,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWZ,EAAOU,EAAAA,cAAoBX,EAAmBC,IAAUD,EAAkBC,EAC9H,E,UCXe,SAASa,EAAiBb,GACvC,OAAOU,EAAAA,cAAoBI,EAAAA,EAAed,EAAOU,EAAAA,cAAoBK,EAAqBf,GAC5F,CAHAc,EAAAA,C","sources":["webpack://gwiyeom-blog/./content/posts/server/golang/2025-05-09-go-type-assertion.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"go 버전을 1.19에서 1.24로 업그레이드한 이후\\n\", React.createElement(_components.code, null, \"row map[string]interface{} \"), \"형태로 값을 사용할 때 타입을 명확히 지정하지 않았고\\nrow 안의 특정 필드의 값을 \", React.createElement(_components.code, null, \"value.([]byte)\"), \" 와 같이 타입 단언을 시도한 코드에서 문제가 발생했습니다\"), \"\\n\", React.createElement(_components.p, null, \"Go 1.24에서는 타입을 더 엄격하게 검사하기 때문에 ok 값이 false로 반환되어 오류가 발생 했습니다\"), \"\\n\", React.createElement(_components.p, null, \"해당 문제는 타입을 \", React.createElement(_components.code, null, \"map[string]interface{}\"), \" 이 아닌 타입을 명확히 하기 위해\\n명확한 타입 선언이 가능한 struct 를 사용해 파싱 해서 해결했다\"), \"\\n\", React.createElement(_components.p, null, \"type assertion 에 대해서 정리해본다\"), \"\\n\", React.createElement(_components.h1, null, \"type assertion (타입 단언)\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"value.([]byte)\"), \"같은 표현을 타입 단언`\\n값 안에 어떤 구체 타입이 들어있는지 검사하고 그 타입으로 꺼낸다\"), \"\\n\", React.createElement(_components.h1, null, \"tip\"), \"\\n\", React.createElement(_components.p, null, \"type conversion (형변환)\\n\", React.createElement(_components.code, null, \"var f float64 = float64(i)\")), \"\\n\", React.createElement(_components.h1, null, \"문제가 상황 다시 보기\"), \"\\n\", React.createElement(_components.p, null, \"row 에서 찾은 id 값은 실제 int64 인데 []byte 로 타입 단언시 실패한다\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"var row = make(map[string]interface{})\\nrow[\\\"id\\\"] = int64(12345)  // int64 값\\nvalue, ok := row[\\\"id\\\"]\\nb, ok := value.([]byte)\\nfmt.Println(\\\"b:\\\", b)  // nil\\nfmt.Println(\\\"ok:\\\", ok) // false\\n\")), \"\\n\", React.createElement(_components.h1, null, \"왜 1.19에서 “안 터졌는가” ?\"), \"\\n\", React.createElement(_components.p, null, \"실제 위 예제를 각 버전에서 해봣을때\\n동작에는 차이가 없었다 다른 원이이 있을텐데..\"), \"\\n\", React.createElement(_components.p, null, \"go.mod 파일을 보니\\n\", React.createElement(_components.code, null, \"github.com/go-sql-driver/mysql v1.6.0\"), \" 에서\\n\", React.createElement(_components.code, null, \"github.com/go-sql-driver/mysql v1.9.2\"), \" 로 같이 업그레이드 되었다\"), \"\\n\", React.createElement(_components.p, null, \"go-sql-driver/mysql는 DB에서 Select한 값을 Go 쪽으로 반환할 때\\n각 컬럼 타입을 Go 타입으로 매핑하기 때문에 버전이 업그레이드 되면서 더 정확한 타입을 반환하여 문제 발생\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"v1.6.0: INT 컬럼 결과 → []byte(\\\"12345\\\")로 반환\\nv1.9.2: INT 컬럼 결과 → int64(12345)로 반환\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/server/golang/2025-05-09-go-type-assertion.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","code","pre","_provideComponents","components","React","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}