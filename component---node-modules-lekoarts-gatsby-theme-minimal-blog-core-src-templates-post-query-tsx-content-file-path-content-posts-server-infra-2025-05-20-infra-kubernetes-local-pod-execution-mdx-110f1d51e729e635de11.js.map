{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-infra-2025-05-20-infra-kubernetes-local-pod-execution-mdx-110f1d51e729e635de11.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/server/infra/2025-05-20-infra-kubernetes-local-pod-execution.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"staging 은 쿠버네티스 환경이다\\n젠킨스 파이프라인을 활용해서 docker 이미지를 빌드 push 하고 staging 에\\n앱을 배포하려고 한다\"), \"\\n\", React.createElement(_components.p, null, \"ECR 까지 이미지를 빌드 했고\\n로컬에서 AWS ECR 이미지를 받아와 쿠버네틱스 파드를 실행하려고 한다\"), \"\\n\", React.createElement(_components.h1, null, \"로컬에서 설치할것\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"kubectl -> brew install kubectl ,kubectl version 확인\"), \"\\n\", React.createElement(_components.li, null, \"kind  -> brew install kind , kind version\"), \"\\n\", React.createElement(_components.li, null, \"docker\"), \"\\n\", React.createElement(_components.li, null, \"helm ->  brew install helm\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, \"ECR 이미지 다운받고 pod 실행 - 앱을 로컬에서 실행\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"AWS ECR에 로그인하여 Docker 이미지 Pull/Push를 허용하는 인증 명령어\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"aws ecr get-login-password --region ap-northeast-2 | \\\\\\ndocker login --username AWS --password-stdin 123456789012.dkr.ecr.ap-northeast-2.amazonaws.com\\n\")), \"\\n\", React.createElement(_components.ol, {\n    start: \"2\"\n  }, \"\\n\", React.createElement(_components.li, null, \"Docker에서 ECR 이미지 pull\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"docker pull 123456789012.dkr.ecr.ap-northeast-2.amazonaws.com/test-sharing-service:latest\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"docker images\"), \" 로 다운받은 이미지 확인\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"tip Docker Scout란?\\nDocker Scout는 pulled된 이미지에 대해 다음을 자동으로 수행\\n취약점 스캔 (CVEs) 보안 업데이트 제안 이미지 분석 결과를 Docker Desktop에서 확인 가능\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"tip AWS ECR 에서 실제 이미지 이름 조회해서 tag 등 확인 가능\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"aws ecr describe-images \\\\\\n  --repository-name test-sharing-service \\\\\\n  --region ap-northeast-2\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"\\\"imageTags\\\": [\\n\\\"latest\\\"\\n]\\n\")), \"\\n\", React.createElement(_components.ol, {\n    start: \"3\"\n  }, \"\\n\", React.createElement(_components.li, null, \"로컬에 클러스터 생성\\nkind 활용: Kubernetes 실습/테스트 환경에서 로컬에서 클러스터를 만들 수 있게 해주는 도구\\n쿠버네티스를 로컬에서 빠르게 실습하고 테스트하고 싶을때 활용\"), \"\\n\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"목적\"), React.createElement(_components.th, null, \"명령어\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, \"클러스터 목록 보기\"), React.createElement(_components.td, null, React.createElement(_components.code, null, \"kind get clusters\"))), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"PC에 K8s 클러스터 구성\"), React.createElement(_components.td, null, React.createElement(_components.code, null, \"kind create cluster --name test\"))), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"현재 kubectl 컨텍스트 보기\"), React.createElement(_components.td, null, React.createElement(_components.code, null, \"kubectl config get-contexts\"))), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"클러스터 전체 리소스 보기\"), React.createElement(_components.td, null, React.createElement(_components.code, null, \"kubectl get all -A\"))), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"노드 보기\"), React.createElement(_components.td, null, React.createElement(_components.code, null, \"kubectl get nodes\"))), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"클러스터 정보 보기\"), React.createElement(_components.td, null, React.createElement(_components.code, null, \"kubectl cluster-info\"))))), \"\\n\", React.createElement(_components.p, null, \"kind는 내부적으로 Docker 컨테이너를 사용해서\\n\", React.createElement(_components.code, null, \"docker ps\"), \" 실행시 kind-control-plane 이라는 이름의 컨테이너가 실행 중인 걸 확인할 수 있다\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"CONTAINER ID\"), React.createElement(_components.th, null, \"IMAGE\"), React.createElement(_components.th, null, \"PORTS\"), React.createElement(_components.th, null, \"NAMES\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, \"11111\"), React.createElement(_components.td, null, \"kindest/node:v1.33.1\"), React.createElement(_components.td, null, \"127.0.0.1:64964->6443/tcp\"), React.createElement(_components.td, null, \"kind-control-plane\")))), \"\\n\", React.createElement(_components.ol, {\n    start: \"4\"\n  }, \"\\n\", React.createElement(_components.li, null, \"kind 클러스터에 이미지 import\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"kind load docker-image 123456789012.dkr.ecr.ap-northeast-2.amazonaws.com/test-sharing-service:latest --name test\\n\")), \"\\n\", React.createElement(_components.ol, {\n    start: \"5\"\n  }, \"\\n\", React.createElement(_components.li, null, \"직접 Pod 만들어보자\\n\", React.createElement(_components.code, null, \"nano my-pod.yaml\")), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"apiVersion: v1\\nkind: Pod\\nmetadata:\\n  name: test-service-pod\\nspec:\\n  containers:\\n    - name: test-service\\n      image: 123456789012.dkr.ecr.ap-northeast-2.amazonaws.com/test-sharing-service:latest\\n      ports:\\n        - containerPort: 9010\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"kubectl apply -f my-pod.yaml\"), \" 적용시 pod/test-service-pod 생성\\n\", React.createElement(_components.code, null, \"kubectl get pods \"), \" 로 실행 확인\"), \"\\n\", React.createElement(_components.h1, null, \"로컬에서 실행한 앱과 mysql 연동\"), \"\\n\", React.createElement(_components.p, null, \"로컬에 pods 추가햤지만 실행되고 꺼지고 있다\\nCrashLoopBackOff은 정상적인 앱 종료가 아닌 경우로\\n\", React.createElement(_components.code, null, \"kubectl logs test-service-pod\"), \" 로 로그를 봤더니\\nDB 연결 실패다\"), \"\\n\", React.createElement(_components.h3, null, \"문제\"), \"\\n\", React.createElement(_components.p, null, \"로컬 PC에 있는 MySQL DB에 접근하는 것이 아니다\\n쿠버네티스 클러스터 안에 새로운 MySQL을 생성해서 그 DB에 접근 해야한다\"), \"\\n\", React.createElement(_components.h3, null, \"해결\"), \"\\n\", React.createElement(_components.p, null, \"Helm을 이용해 클러스터 안에 MySQL을 띄우고\\nNestJS 앱에서 이 MySQL에 연결\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Bitnami MySQL 차트 추가\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Bitnami라는 Helm Chart 저장소를 내 로컬 Helm에 등록하고 최신 목록으로 갱신\\nHelm을 처음 설치하면 기본 저장소가 아무것도 없기때문에\\n외부 저장소를 내 Helm에 등록하는 작업을함\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"helm repo add bitnami https://charts.bitnami.com/bitnami # bitnami 라는 Helm 저장소를 내 로컬 Helm에 등록\\nhelm repo update      # 최신 Chart 목록 반영\\n\")), \"\\n\", React.createElement(_components.p, null, \"방금 등록한 저장소(bitnami)에서 mysql Chart를 받아와서\\n내 클러스터에 MySQL을 설치\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"nano mysql-values.yaml\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"auth:\\n  rootPassword: \\\"1234\\\"\\n  username: \\\"user\\\"\\n  password: \\\"1234\\\"\\n  database: \\\"test\\\"\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"helm install my-mysql bitnami/mysql -f mysql-values.yaml\"), \"\\n수정 후\\n\", React.createElement(_components.code, null, \"helm upgrade my-mysql bitnami/mysql -f mysql-values.yaml\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"삭제하고 싶다면 + 데이터(pvc) 자동 삭제되지 않아서 수동 삭제\\n\", React.createElement(_components.code, null, \" helm uninstall my-mysql\"), \"\\n\", React.createElement(_components.code, null, \"kubectl delete pvc -l app.kubernetes.io/instance=my-mysql\")), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"my-pod.yaml DB환경 변수 추가\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"nano my-pod.yaml \")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"...\\nports:\\n    - containerPort: 9010\\nenv:\\n        - name: DB_HOST\\n          value: my-mysql.default.svc.cluster.local\\n        - name: DB_PORT\\n          value: \\\"3306\\\"\\n        - name: DB_USER\\n          value: \\\"user\\\"\\n        - name: DB_PASSWORD\\n          value: \\\"1234\\\"\\n        - name: DB_NAME\\n          value: test\\n\")), \"\\n\", React.createElement(_components.p, null, \"변경된 내용 저장하고 같은 이름 파드 지우고 다시 적용시키기\\n\", React.createElement(_components.code, null, \"kubectl delete pod gift-service-pod\"), \"\\n\", React.createElement(_components.code, null, \"kubectl apply -f my-pod.yaml\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/server/infra/2025-05-20-infra-kubernetes-local-pod-execution.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","ol","li","pre","code","ul","table","thead","tr","th","tbody","td","h3","_provideComponents","components","React","start","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}