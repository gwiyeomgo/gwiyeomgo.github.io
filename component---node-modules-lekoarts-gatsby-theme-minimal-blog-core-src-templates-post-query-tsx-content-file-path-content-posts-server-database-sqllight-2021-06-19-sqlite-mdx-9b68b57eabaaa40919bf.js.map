{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-database-sqllight-2021-06-19-sqlite-mdx-9b68b57eabaaa40919bf.js","mappings":"mNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,GAAI,KACJC,WAAY,aACZC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBb,EAAMc,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBd,EAAYG,GAAI,KAAM,MAAO,KAAMW,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,gFAAiF,KAAMU,EAAAA,cAAoBd,EAAYK,GAAI,KAAM,gBAAiB,KAAMS,EAAAA,cAAoBd,EAAYM,WAAY,KAAM,KAAMQ,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,uKAAwK,MAAO,KAAMU,EAAAA,cAAoBd,EAAYK,GAAI,KAAM,YAAa,KAAMS,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,qCAAsC,KAAMU,EAAAA,cAAoBd,EAAYK,GAAI,KAAM,sBAAuB,KAAMS,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,wFAAyF,KAAMU,EAAAA,cAAoBd,EAAYK,GAAI,KAAM,iBAAkB,KAAMS,EAAAA,cAAoBd,EAAYI,EAAG,KAAMU,EAAAA,cAAoBd,EAAYO,GAAI,KAAM,OAAQ,KAAMO,EAAAA,cAAoBd,EAAYM,WAAY,KAAM,KAAMQ,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,kDAAmD,MAAO,KAAMU,EAAAA,cAAoBd,EAAYQ,GAAI,KAAM,KAAMM,EAAAA,cAAoBd,EAAYS,GAAI,KAAM,0CAA2C,MAAO,KAAMK,EAAAA,cAAoBd,EAAYU,IAAK,KAAMI,EAAAA,cAAoBd,EAAYW,KAAM,CACr8CI,UAAW,gBACV,iTAAsT,KAAMD,EAAAA,cAAoBd,EAAYQ,GAAI,KAAM,KAAMM,EAAAA,cAAoBd,EAAYS,GAAI,KAAM,wBAAyB,MAAO,KAAMK,EAAAA,cAAoBd,EAAYU,IAAK,KAAMI,EAAAA,cAAoBd,EAAYW,KAAM,CAC9gBI,UAAW,gBACV,wNAA6O,KAAMD,EAAAA,cAAoBd,EAAYQ,GAAI,KAAM,KAAMM,EAAAA,cAAoBd,EAAYS,GAAI,KAAM,yBAA0B,MAC5W,CAKA,MAJA,SAAoBV,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOiB,QAASC,GAAahB,OAAOC,OAAO,CAAC,GAAGU,EAAAA,EAAAA,MAAsBb,EAAMc,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWlB,EAAOe,EAAAA,cAAoBhB,EAAmBC,IAAUD,EAAkBC,EAC9H,E,UCpBe,SAASmB,EAAiBnB,GACvC,OAAOe,EAAAA,cAAoBK,EAAAA,EAAepB,EAAOe,EAAAA,cAAoBM,EAAqBrB,GAC5F,CAHAoB,EAAAA,C","sources":["webpack://gwiyeom-blog/./content/posts/server/database/sqllight/2021-06-19-sqlite.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h3: \"h3\",\n    blockquote: \"blockquote\",\n    em: \"em\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"1.서비스코드의 testcase 를 추가하고 싶다.\\n2.테스트 케이스 환경을 구성해야 한다\\n3.db 는 SQLITE 을 쓰기로 했다.\"), \"\\n\", React.createElement(_components.h3, null, \"SQLITE 은 뭐지?\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"별도 관리가 필요 없는 메모리 데이터베이스 = sqlite\\nSQLite는 MySQL나 PostgreSQL와 같은 데이터베이스 관리 시스템이지만,\\n서버가 아니라 응용 프로그램에 넣어 사용하는 비교적 가벼운 데이터베이스\\nWindows 환경에서 go-sqlite3 를 사용하기 위해 설치한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"YML 파일 ?\"), \"\\n\", React.createElement(_components.p, null, \"메모리 DB에 입력할 데이터를 YML파일을 통해 입력합니다.\"), \"\\n\", React.createElement(_components.h3, null, \"YML 파일은 어디에 > (경로)\"), \"\\n\", React.createElement(_components.p, null, \"go 에서는 testdata 디렉토리와 _test 로 끝나는 파일은 빌드에서 제외됩니다.\\ntestdata 디렉토리를 생성하고 yml 파일을 생성했다.\"), \"\\n\", React.createElement(_components.h3, null, \"YML 데이터 입력 방법\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.em, null, \"중요\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"yml을 작성할 때 작성법을 따르지 않는다면 테스트를 제대로 진행 할 수 없습니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"yml은 DB의 TABLE환경과 똑같이 설정한다.(필수값만 입력하기)\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yml\"\n  }, \"- user_no: 1\\n  id: \\\"super@w.org\\\"\\n  company_id: 1\\n  password: $2a$0d1S4JStXW\\n  name: \\\"수퍼담당자\\\"\\n  status: \\\"Approval\\\"\\n  mobile: uvbANnupYDSrkys=\\n  infomation_use_agree: 1\\n  infomation_receiving_agree: 1\\n  created_at: RAW=datetime('now')\\n  updated_by: \\\"1\\\"\\n  updated_at: RAW=datetime('now')\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"JSON형태의 값은 한줄로 작성한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yml\"\n  }, \"business_areas: { \\\"child\\\": true, \\\"youth\\\": true, \\\"senior\\\": true, \\\"disabled\\\": true, \\\"women\\\": true, \\\"family\\\": true, \\\"community\\\": true, \\\"internationalDevelopment\\\": true, \\\"environment\\\": true, \\\"notApplicable\\\": true}\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"암호화된 값은 암호화된 키를 작성한다.\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/server/database/sqllight/2021-06-19-sqlite.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","h3","blockquote","em","ul","li","pre","code","_provideComponents","components","React","className","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}