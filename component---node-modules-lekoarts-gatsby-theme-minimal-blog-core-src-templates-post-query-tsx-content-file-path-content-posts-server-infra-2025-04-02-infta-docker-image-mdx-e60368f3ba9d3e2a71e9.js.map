{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-infra-2025-04-02-infta-docker-image-mdx-e60368f3ba9d3e2a71e9.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/server/infra/2025-04-02-infta-docker-image.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    pre: \"pre\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    hr: \"hr\",\n    ol: \"ol\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, React.createElement(_components.code, null, \"docker images | grep {project이름}\")), \"\\n\", React.createElement(_components.h1, null, \"Docker Push 실패: 413 Request Entity Too Large 해결 사례\"), \"\\n\", React.createElement(_components.h2, null, \"문제 상황\"), \"\\n\", React.createElement(_components.p, null, \"Docker 이미지 빌드 후 \", React.createElement(_components.code, null, \"docker push\"), \" 과정에서 아래와 같은 오류 발생:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"error parsing HTTP 413 response body: invalid character '<' looking for beginning of value: \\\"<html>...<h1>413 Request Entity Too Large</h1>...</html>\\\"\\n\")), \"\\n\", React.createElement(_components.h3, null, \"원인\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Docker 이미지가 \", React.createElement(_components.strong, null, \"500MB 이상\"), \"으로 커짐\"), \"\\n\", React.createElement(_components.li, null, \"Docker Registry 앞단의 \", React.createElement(_components.strong, null, \"Nginx\"), \"가 \", React.createElement(_components.code, null, \"client_max_body_size\"), \" 제한으로 인해 push 요청을 차단\"), \"\\n\", React.createElement(_components.li, null, \"하지만 \", React.createElement(_components.strong, null, \"Nginx 설정 변경이 불가능한 환경\"), \"이었음 (\", React.createElement(_components.code, null, \"client_max_body_size\"), \" 수정 불가)\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, null, \"해결 방법\"), \"\\n\", React.createElement(_components.h3, null, \"전략: \", React.createElement(_components.strong, null, \"Docker 이미지 자체를 경량화하여 push 허용 범위 안으로 줄이기\")), \"\\n\", React.createElement(_components.h3, null, \"적용한 최적화 방법\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Base Image 변경\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"기존: \", React.createElement(_components.code, null, \"node:22\")), \"\\n\", React.createElement(_components.li, null, \"변경: \", React.createElement(_components.code, null, \"node:22-alpine\"), \"\\n→ Alpine 기반 Node 이미지로 용량 최소화 (약 30~50MB 수준)\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"멀티 스테이지 Dockerfile 유지\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Build 스테이지에서만 \", React.createElement(_components.code, null, \"yarn install\"), \" + \", React.createElement(_components.code, null, \"yarn build\")), \"\\n\", React.createElement(_components.li, null, \"Runtime 스테이지에는 빌드된 결과물만 복사\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"런타임 스테이지에서 \", React.createElement(_components.code, null, \"yarn install --production\"), \" 제거\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"대신 Build 스테이지에서 설치된 \", React.createElement(_components.code, null, \"node_modules\"), \"를 그대로 복사\"), \"\\n\", React.createElement(_components.li, null, \"불필요한 재설치 제거로 용량 절감\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"최종 Dockerfile 핵심 부분\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"FROM node:22-alpine AS builder\\n\\nWORKDIR /app\\nRUN corepack enable\\n\\nCOPY package.json yarn.lock* ./\\nRUN yarn install --production\\n\\nCOPY . .\\nRUN yarn build\\n\\nFROM node:22-alpine\\n\\nWORKDIR /app\\nRUN corepack enable\\n\\nCOPY package.json yarn.lock* ./\\nCOPY --from=builder /app/node_modules ./node_modules\\nCOPY --from=builder /app/dist ./dist\\n\\nEXPOSE 9010\\nCMD [\\\"node\\\", \\\"dist/main\\\"]\\n\")), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, null, \"결과\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"이미지 용량: \", React.createElement(_components.strong, null, \"약 700MB → 500MB 이하로 감소\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"413 Request Entity Too Large\"), \" 오류 해결\"), \"\\n\", React.createElement(_components.li, null, \"별도 인프라 설정 변경 없이 문제 해결\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, null, \"결론\"), \"\\n\", React.createElement(_components.p, null, \"Nginx 설정 변경이 불가능한 환경에서는 \", React.createElement(_components.strong, null, \"이미지 자체를 슬림하게 최적화하는 것이 가장 현실적인 해결책\"), \"이다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"작은 이미지는 빠른 배포, 적은 네트워크 전송량, 보안 노출 최소화에도 효과적입니다.\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/server/infra/2025-04-02-infta-docker-image.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","p","code","h1","h2","pre","h3","ul","li","strong","hr","ol","blockquote","_provideComponents","components","React","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}