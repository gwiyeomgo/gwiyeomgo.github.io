{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-database-mysql-2025-04-03-mysql-optimized-news-api-mdx-44219735545dad2dfef5.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/server/database/mysql/2025-04-03-mysql-optimized-newsAPI.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    blockquote: \"blockquote\",\n    p: \"p\",\n    pre: \"pre\",\n    ol: \"ol\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"배경\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"지금 운영하는 시스템 DB에 부하가 발생한다\\n운영 중인 시스템에서 DB 부하가 감지되었고 Grafana 알림을 통해 개발팀에 전달되었습니다.\\nGrafana를 통해 운영 DB 인스턴스의 CPU 사용률이 60.73% (B0 시점)까지 상승한 것이 확인되었습니다.\\n해당 시간대의 로그를 확인해본 결과 매장 소식 목록을 조회하는 API에서 5초 이상 응답 지연이 발생했고\\n이 API가 DB의 CPU 및 I/O 사용률을 급격히 상승시키는 주요 원인으로 확인되었습니다\"), \"\\n\", React.createElement(_components.li, null, \"news 를 조회하는 리스트 API latency가 5초 이상\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"select * from news\"), \"테이블르 조회했는데 조회 속도가 비정상적이다\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"전체데이터 4593, *로 300건 조회 쿼리 실행시 16-18초\\n다른 테이블 전체데이터 1893098, *로 300건 조회 쿼리 실행시 0.074초\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, \"news 테이블 분석\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"SHOW TABLE STATUS LIKE news;\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"- 행 수: 약 4,593건\\n- `Data_length`: 약 324MB\\n- 평균 row 크기: 약 3.8KB\\n- 주요 필드 중 `contents (LONGTEXT)`, `created/updated (JSON)` 필드가 row 크기를 크게 증가시킴\\n\")), \"\\n\", React.createElement(_components.p, null, \"row 사이즈가 너무 크다\\n4천 건인데 전체 데이터 크기가 324MB\\nBLOB, TEXT, JSON 같은 필드가 존재하여 이 경우 디스크 I/O가 엄청 느려질 수 있음\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"SHOW COLUMNS FROM news;\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"LONGTEXT는 최대 4GB까지 저장 가능한 타입이라\\nMySQL이 내부적으로 별도 LOB 공간에 데이터를 저장하고 불러올 때도 따로 읽어야 해요\\n특히 SELECT * 를 할 때 이 컬럼을 매번 읽게 되니 디스크 I/O가 폭증해서 속도가 극심하게 느려집니다\"), \"\\n\", React.createElement(_components.h1, null, \"개선 작업\"), \"\\n\", React.createElement(_components.p, null, \"1.API에서 필요한 컬럼만 선택해서 가져오도록 수정\\ncontents, created, updated는 상세 조회에서만 검색\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"개선 전\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"SELECT\\n  sn.*,\\n  a.cnt AS sent_cnt\\nFROM news AS sn\\nLEFT JOIN (\\n  SELECT table_id AS id, COUNT(*) AS cnt\\n  FROM notifications AS n\\n  WHERE n.table = 'news' AND sent = 1\\n  GROUP BY table_id\\n) AS a ON sn.id = a.id\\nWHERE (sn.del IS NULL OR sn.del = 0)\\n  AND sn.code IN (123);\\n\")), \"\\n\", React.createElement(_components.h2, null, \"EXPLAIN 으로 실행 계획 보기\"), \"\\n\", React.createElement(_components.p, null, \"실행 결과\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"key = NULL : 인덱스 없음\"), \"\\n\", React.createElement(_components.li, null, \"type All :전체 테이블 스캔(Full Table Scan 발생)\"), \"\\n\", React.createElement(_components.li, null, \"Extra Using temporary, Using filesort :\\nGROUP BY 또는 ORDER BY 처리 시 임시 테이블 생성 및 디스크 정렬 발생\\n필터 조건 notifications 테이블 발송 데이터 백만건\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, \"1차 개선\"), \"\\n\", React.createElement(_components.p, null, \"복합 인덱스 추가 → GROUP BY table_id를 효율적으로 수행\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"CREATE INDEX idx_table_sent_id_table_id ON notifications(\", React.createElement(_components.code, null, \"table\"), \", sent, table_id);\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"IN 사용 필터링 컬럼에도 인덱스 추가\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"CREATE INDEX idx_code ON news(code);\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"서브쿼리와 JOIN 대상 테이블 양쪽 모두에 적절한 인덱스가 필요\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"결과\\n인덱스 추가후 쿼리플랜 실행 하니\\n\", React.createElement(_components.code, null, \"Extra Using index\"), \"\\n인덱스 타는 것 확인\\n그렇지만 아직 많이 느리다..인덱스 추가 만으로 큰 변화를 못느낌\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"EXPLAIN ANALYZE 결과를 봤을때..\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"SELECT\\n  sn.id,\\n  ...\\n    (필요한 컬럼만 선택)\\n  a.cnt AS sent_cnt\\nFROM news AS sn\\n\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"SELECT *\"), \" 제거 → I/O 병목 원인인 \", React.createElement(_components.code, null, \"contents (LONGTEXT)\"), \" 컬럼 조회 제거\"), \"\\n\", React.createElement(_components.li, null, \"쿼리 구조는 동일하지만, row size가 줄어 쿼리 응답 속도 대폭 개선\"), \"\\n\", React.createElement(_components.li, null, \"실행 계획은 유지되지만, 실제 리소스 소모와 체감 성능은 큰 차이\"), \"\\n\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"개선 전\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"Total execution time: 888ms ~ 19,761ms\\nTable scan on store_news: 4604 rows\\nGroup aggregate on notification_recipients: 1.04 million rows\\nNested Loop JOIN: 81 loops\\nMaterialized subquery time: 888ms\\n\")), \"\\n\", React.createElement(_components.ol, {\n    start: \"2\"\n  }, \"\\n\", React.createElement(_components.li, null, \"개선 후\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"Total execution time: 604ms ~ 919ms ✅\\nTable scan on store_news: 4604 rows\\nGroup aggregate on notification_recipients: 1.04 million rows\\nNested Loop JOIN: 81 loops\\nMaterialized subquery time: 604ms ✅\\n\")), \"\\n\", React.createElement(_components.h1, null, \"결론\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"전체 실행 시간이 약 19.7초 → 0.9초로 약 20배 이상 개선됨\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"쿼리 성능 병목은 row 수보다 row 크기와 I/O 비용에 의해 크게 영향을 받음\"), \"\\n\", React.createElement(_components.li, null, \"\\\"같은 실행 계획이라도, 읽는 데이터의 무게가 다르면 체감은 하늘과 땅 차이\\\"\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"SELECT *\"), \"는 반드시 피하고, 필요한 컬럼만 명시할 것\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/server/database/mysql/2025-04-03-mysql-optimized-newsAPI.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","ul","li","code","blockquote","p","pre","ol","h2","_provideComponents","components","React","start","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}