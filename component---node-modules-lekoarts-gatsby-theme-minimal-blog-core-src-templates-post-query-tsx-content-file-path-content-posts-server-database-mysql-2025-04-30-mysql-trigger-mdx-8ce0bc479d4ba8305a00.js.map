{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-database-mysql-2025-04-30-mysql-trigger-mdx-8ce0bc479d4ba8305a00.js","mappings":"mNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,WAAY,aACZC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBT,EAAMU,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBV,EAAYG,GAAI,KAAM,MAAO,KAAMO,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,wEAAyE,KAAMM,EAAAA,cAAoBV,EAAYK,WAAY,KAAM,KAAMK,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,kHAAmH,MAAO,KAAMM,EAAAA,cAAoBV,EAAYM,IAAK,KAAMI,EAAAA,cAAoBV,EAAYO,KAAM,KAAM,8NAA+N,KAAMG,EAAAA,cAAoBV,EAAYG,GAAI,KAAM,yBAA0B,KAAMO,EAAAA,cAAoBV,EAAYG,GAAI,KAAM,SAAU,KAAMO,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,iDAC56B,CAKA,MAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGM,EAAAA,EAAAA,MAAsBT,EAAMU,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWb,EAAOW,EAAAA,cAAoBZ,EAAmBC,IAAUD,EAAkBC,EAC9H,E,UCZe,SAASc,EAAiBd,GACvC,OAAOW,EAAAA,cAAoBI,EAAAA,EAAef,EAAOW,EAAAA,cAAoBK,EAAqBhB,GAC5F,CAHAe,EAAAA,C","sources":["webpack://gwiyeom-blog/./content/posts/server/database/mysql/2025-04-30-mysql-TRIGGER.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    blockquote: \"blockquote\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"trigger 를 적용해 UNIQUE 제약은 NULL 중복을 막지 못하는 부분을 해결해보려고한다\\n트리거에 대해서 알아보자\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"특정 이벤트(INSERT, UPDATE, DELETE)가 발생했을 때 자동으로 실행되는 SQL 블록\\n트리거가 적용된 테이블에 INSERT/UPDATE/DELETE가 발생할 때마다  반복적으로 실행\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"CREATE TRIGGER 트리거이름\\n[BEFORE | AFTER] [INSERT | UPDATE | DELETE]\\nON 테이블명\\nFOR EACH ROW\\nBEGIN\\n  -- 실행할 SQL 문들\\nEND;\\n-- BEFORE: 이벤트가 실행 되기 전에 실행\\n-- AFTER: 이벤트가 실행 된 후에 실행\\n-- FOR EACH ROW: 테이블에 영향을 주는 각 row마다 작동\\n\")), \"\\n\", React.createElement(_components.h1, null, \"트리거는 성능에 영향을 줄 수 있다?!\"), \"\\n\", React.createElement(_components.h1, null, \"언제쓰지?\"), \"\\n\", React.createElement(_components.p, null, \"감사 로그 기록용 트리거 예제\\nUPDATE 시 이전 값 로그 저장용 트리거 예시\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/server/database/mysql/2025-04-30-mysql-TRIGGER.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","blockquote","pre","code","_provideComponents","components","React","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}