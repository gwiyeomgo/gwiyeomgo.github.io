"use strict";(self.webpackChunkgwiyeom_blog=self.webpackChunkgwiyeom_blog||[]).push([[8500],{8622:function(e,t,n){n.r(t),n.d(t,{Head:function(){return c.p},default:function(){return o}});var l=n(6540),a=n(8453);function r(e){const t=Object.assign({h1:"h1",p:"p",ul:"ul",li:"li",code:"code",pre:"pre",a:"a"},(0,a.RP)(),e.components);return l.createElement(l.Fragment,null,l.createElement(t.h1,null,"배경"),"\n",l.createElement(t.p,null,"rebase 대상 커밋과 upstream 커밋의 patch 내용이 동일한 경우 커밋을 건너뛴다"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,'branch            main       -> FETCH_HEAD\nwarning: skipped previously applied commit 927650a\n힌트: use --reapply-cherry-picks to include skipped commits\n힌트: Disable this message with "git config advice.skippedCherryPicks false"'),"\n"),"\n",l.createElement(t.p,null,"git cherry-pick --reapply-cherry-picks 927650a"),"\n",l.createElement(t.h1,null,"이게 무슨 상황이지? Git이 중복된 변경 사항을 감지해서 생기는 현상"),"\n",l.createElement(t.h1,null,"내가 뭘 하면 될까?"),"\n",l.createElement(t.p,null,"의도된 동작이면 무시\n내 커밋이 누락되었는지 확인\n",l.createElement(t.code,null,"git cherry -v origin/main")),"\n",l.createElement(t.h1,null,"재현 가능?"),"\n",l.createElement(t.p,null,"개발하다가 순식간에 만난에러.. 일단 개발 환경에서 다시 재현할 수 없으니 github 에서 재현해보자"),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,'git init rebase-test && cd rebase-test && echo "hello" > file.txt && git add . && git commit -m "Initial"\ngit checkout -b feature && echo "foo" >> file.txt && git commit -am "Add foo (feature)"\ngit checkout main && echo "foo" >> file.txt && git commit -am "Add foo (main)"\ngit checkout feature\ngit rebase main\n\n')),"\n",l.createElement(t.p,null,'rebase 시 "Add foo (feature)" 커밋이 내용 중복으로 생략\n(= rebase 과정에서 자동으로 drop됨)'),"\n",l.createElement(t.p,null,'main 브랜치에서 "foo"를 추가한 새 커밋을 만들고\n다시 feature 브랜치로 돌아가 main의 변경사항 위에 feature 커밋을 얹으려 했는데\n이미 동일한 내용이 있어서 feature 커밋은 생략되고, 브랜치만 main 위로 옮겨짐'),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,"Switched to branch 'feature'\nwarning: skipped previously applied commit bf94da6\nhint: use --reapply-cherry-picks to include skipped commits\nhint: Disable this message with \"git config advice.skippedCherryPicks false\"\nSuccessfully rebased and updated refs/heads/feature.\n")),"\n",l.createElement(t.p,null,"결과적으로 feature 브랜치가 main과 완전히 같아진 상태가 된 것"),"\n",l.createElement(t.p,null,l.createElement(t.code,null,"git log --oneline --graph")," 확인"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"23a2c3d (HEAD -> feature, main) Add foo (main)"),"\n",l.createElement(t.li,null,"d8f1758 Initial"),"\n"),"\n",l.createElement(t.h1,null,"참고"),"\n",l.createElement(t.p,null,l.createElement(t.a,{href:"https://stackoverflow.com/questions/61905448/git-cherry-pick-and-then-rebase"},"https://stackoverflow.com/questions/61905448/git-cherry-pick-and-then-rebase"),"\n",l.createElement(t.a,{href:"https://stackoverflow.com/questions/52789519/how-does-git-rebase-skip-the-commit-which-its-change-already-has-in-upstream"},"https://stackoverflow.com/questions/52789519/how-does-git-rebase-skip-the-commit-which-its-change-already-has-in-upstream")))}var i=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,a.RP)(),e.components);return t?l.createElement(t,e,l.createElement(r,e)):r(e)},c=n(7292);function o(e){return l.createElement(c.A,e,l.createElement(i,e))}c.A}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-git-2024-03-06-git-rebase-skip-mdx-46405152ab9184e4efdf.js.map