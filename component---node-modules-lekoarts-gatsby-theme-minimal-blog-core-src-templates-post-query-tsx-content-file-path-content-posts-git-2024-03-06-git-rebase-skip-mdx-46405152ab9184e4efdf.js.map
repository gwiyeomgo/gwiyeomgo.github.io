{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-git-2024-03-06-git-rebase-skip-mdx-46405152ab9184e4efdf.js","mappings":"mNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,GAAI,KACJC,GAAI,KACJC,KAAM,OACNC,IAAK,MACLC,EAAG,MACFC,EAAAA,EAAAA,MAAsBX,EAAMY,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBZ,EAAYG,GAAI,KAAM,MAAO,KAAMS,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,wDAAyD,KAAMQ,EAAAA,cAAoBZ,EAAYK,GAAI,KAAM,KAAMO,EAAAA,cAAoBZ,EAAYM,GAAI,KAAM,yOAA4O,MAAO,KAAMM,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,kDAAmD,KAAMQ,EAAAA,cAAoBZ,EAAYG,GAAI,KAAM,2CAA4C,KAAMS,EAAAA,cAAoBZ,EAAYG,GAAI,KAAM,eAAgB,KAAMS,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,iCAAkCQ,EAAAA,cAAoBZ,EAAYO,KAAM,KAAM,8BAA+B,KAAMK,EAAAA,cAAoBZ,EAAYG,GAAI,KAAM,UAAW,KAAMS,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,6DAA8D,KAAMQ,EAAAA,cAAoBZ,EAAYQ,IAAK,KAAMI,EAAAA,cAAoBZ,EAAYO,KAAM,KAAM,kUAA+U,KAAMK,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,2EAA8E,KAAMQ,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,6IAAgJ,KAAMQ,EAAAA,cAAoBZ,EAAYQ,IAAK,KAAMI,EAAAA,cAAoBZ,EAAYO,KAAM,KAAM,0RAA2R,KAAMK,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,4CAA6C,KAAMQ,EAAAA,cAAoBZ,EAAYI,EAAG,KAAMQ,EAAAA,cAAoBZ,EAAYO,KAAM,KAAM,6BAA8B,OAAQ,KAAMK,EAAAA,cAAoBZ,EAAYK,GAAI,KAAM,KAAMO,EAAAA,cAAoBZ,EAAYM,GAAI,KAAM,kDAAmD,KAAMM,EAAAA,cAAoBZ,EAAYM,GAAI,KAAM,mBAAoB,MAAO,KAAMM,EAAAA,cAAoBZ,EAAYG,GAAI,KAAM,MAAO,KAAMS,EAAAA,cAAoBZ,EAAYI,EAAG,KAAMQ,EAAAA,cAAoBZ,EAAYS,EAAG,CACjwFI,KAAM,gFACL,gFAAiF,KAAMD,EAAAA,cAAoBZ,EAAYS,EAAG,CAC3HI,KAAM,6HACL,8HACL,CAKA,MAJA,SAAoBd,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOe,QAASC,GAAad,OAAOC,OAAO,CAAC,GAAGQ,EAAAA,EAAAA,MAAsBX,EAAMY,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWhB,EAAOa,EAAAA,cAAoBd,EAAmBC,IAAUD,EAAkBC,EAC9H,E,UClBe,SAASiB,EAAiBjB,GACvC,OAAOa,EAAAA,cAAoBK,EAAAA,EAAelB,EAAOa,EAAAA,cAAoBM,EAAqBnB,GAC5F,CAHAkB,EAAAA,C","sources":["webpack://gwiyeom-blog/./content/posts/git/2024-03-06-git-rebase-skip.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    pre: \"pre\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"rebase 대상 커밋과 upstream 커밋의 patch 내용이 동일한 경우 커밋을 건너뛴다\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"branch            main       -> FETCH_HEAD\\nwarning: skipped previously applied commit 927650a\\n힌트: use --reapply-cherry-picks to include skipped commits\\n힌트: Disable this message with \\\"git config advice.skippedCherryPicks false\\\"\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"git cherry-pick --reapply-cherry-picks 927650a\"), \"\\n\", React.createElement(_components.h1, null, \"이게 무슨 상황이지? Git이 중복된 변경 사항을 감지해서 생기는 현상\"), \"\\n\", React.createElement(_components.h1, null, \"내가 뭘 하면 될까?\"), \"\\n\", React.createElement(_components.p, null, \"의도된 동작이면 무시\\n내 커밋이 누락되었는지 확인\\n\", React.createElement(_components.code, null, \"git cherry -v origin/main\")), \"\\n\", React.createElement(_components.h1, null, \"재현 가능?\"), \"\\n\", React.createElement(_components.p, null, \"개발하다가 순식간에 만난에러.. 일단 개발 환경에서 다시 재현할 수 없으니 github 에서 재현해보자\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"git init rebase-test && cd rebase-test && echo \\\"hello\\\" > file.txt && git add . && git commit -m \\\"Initial\\\"\\ngit checkout -b feature && echo \\\"foo\\\" >> file.txt && git commit -am \\\"Add foo (feature)\\\"\\ngit checkout main && echo \\\"foo\\\" >> file.txt && git commit -am \\\"Add foo (main)\\\"\\ngit checkout feature\\ngit rebase main\\n\\n\")), \"\\n\", React.createElement(_components.p, null, \"rebase 시 \\\"Add foo (feature)\\\" 커밋이 내용 중복으로 생략\\n(= rebase 과정에서 자동으로 drop됨)\"), \"\\n\", React.createElement(_components.p, null, \"main 브랜치에서 \\\"foo\\\"를 추가한 새 커밋을 만들고\\n다시 feature 브랜치로 돌아가 main의 변경사항 위에 feature 커밋을 얹으려 했는데\\n이미 동일한 내용이 있어서 feature 커밋은 생략되고, 브랜치만 main 위로 옮겨짐\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"Switched to branch 'feature'\\nwarning: skipped previously applied commit bf94da6\\nhint: use --reapply-cherry-picks to include skipped commits\\nhint: Disable this message with \\\"git config advice.skippedCherryPicks false\\\"\\nSuccessfully rebased and updated refs/heads/feature.\\n\")), \"\\n\", React.createElement(_components.p, null, \"결과적으로 feature 브랜치가 main과 완전히 같아진 상태가 된 것\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"git log --oneline --graph\"), \" 확인\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"23a2c3d (HEAD -> feature, main) Add foo (main)\"), \"\\n\", React.createElement(_components.li, null, \"d8f1758 Initial\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, \"참고\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://stackoverflow.com/questions/61905448/git-cherry-pick-and-then-rebase\"\n  }, \"https://stackoverflow.com/questions/61905448/git-cherry-pick-and-then-rebase\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://stackoverflow.com/questions/52789519/how-does-git-rebase-skip-the-commit-which-its-change-already-has-in-upstream\"\n  }, \"https://stackoverflow.com/questions/52789519/how-does-git-rebase-skip-the-commit-which-its-change-already-has-in-upstream\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/git/2024-03-06-git-rebase-skip.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","ul","li","code","pre","a","_provideComponents","components","React","href","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}