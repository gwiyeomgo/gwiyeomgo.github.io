{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-database-mysql-2025-03-13-mysql-json-unquote-mdx-b2be47c82e2018f340d4.js","mappings":"mNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,KAAM,OACNC,IAAK,MACLC,GAAI,KACJC,GAAI,KACJC,WAAY,eACXC,EAAAA,EAAAA,MAAsBX,EAAMY,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBZ,EAAYG,GAAI,KAAM,MAAO,KAAMS,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,qEAAsEQ,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,gBAAiB,iCAAkCO,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,gBAAiB,uCAAwC,KAAMO,EAAAA,cAAoBZ,EAAYG,GAAI,KAAM,qBAAsB,KAAMS,EAAAA,cAAoBZ,EAAYM,IAAK,KAAMM,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,gGAAiG,KAAMO,EAAAA,cAAoBZ,EAAYO,GAAI,KAAM,KAAMK,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,+BAAkC,MAAO,KAAMI,EAAAA,cAAoBZ,EAAYG,GAAI,KAAM,+BAAgC,KAAMS,EAAAA,cAAoBZ,EAAYM,IAAK,KAAMM,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,2GAA4G,KAAMO,EAAAA,cAAoBZ,EAAYO,GAAI,KAAM,KAAMK,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,+BAAgC,MAAO,KAAMI,EAAAA,cAAoBZ,EAAYG,GAAI,KAAM,MAAO,KAAMS,EAAAA,cAAoBZ,EAAYO,GAAI,KAAM,KAAMK,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,oDAAqD,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,wCAAyC,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,iCAAkC,MAAO,KAAMI,EAAAA,cAAoBZ,EAAYS,WAAY,KAAM,KAAMG,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,oBAAqB,MAAO,KAAMQ,EAAAA,cAAoBZ,EAAYM,IAAK,KAAMM,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,2FAA4F,KAAMO,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,kBAAmBQ,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,gBAAiB,oBACngE,CAKA,MAJA,SAAoBN,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOc,QAASC,GAAab,OAAOC,OAAO,CAAC,GAAGQ,EAAAA,EAAAA,MAAsBX,EAAMY,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWf,EAAOa,EAAAA,cAAoBd,EAAmBC,IAAUD,EAAkBC,EAC9H,E,UCde,SAASgB,EAAiBhB,GACvC,OAAOa,EAAAA,cAAoBI,EAAAA,EAAejB,EAAOa,EAAAA,cAAoBK,EAAqBlB,GAC5F,CAHAiB,EAAAA,C","sources":["webpack://gwiyeom-blog/./content/posts/server/database/mysql/2025-03-13-mysql-jsonUnquote.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"쿼리조회중 created json 값에서 특정 값을 조건으로 조회했다\\ngpt 에 쿼리가 잘 작성했는지 확인해봤는데\\n\", React.createElement(_components.code, null, \"JSON_EXTRACT\"), \" 는 문자열이 아닌 JSON 타입을 반환하기 때문에\\n\", React.createElement(_components.code, null, \"JSON_UNQUOTE\"), \" 사용해야 더 안전하다고 한다\\n진짜인지 테스트 해보고 기록한다\"), \"\\n\", React.createElement(_components.h1, null, \"JSON_EXTRACT 만 사용\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"SELECT JSON_EXTRACT('{\\\"datetime\\\": \\\"2025-03-12\\\"}', '$.datetime') AS extracted_value;\\n\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\\"2025-03-12\\\"  -- 따옴표 포함 문자열\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, \"JSON_UNQUOTE + JSON_EXTRACT\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"SELECT JSON_UNQUOTE(JSON_EXTRACT('{\\\"datetime\\\": \\\"2025-03-12\\\"}', '$.datetime')) AS unquoted_value;\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"2025-03-12  -- 따옴표가 제외 문자열로\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, \"결론\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"JSON_EXTRACT 사용시 JSON 타입은 따옴표를 포함한 문자열로 처리될 수 있음\"), \"\\n\", React.createElement(_components.li, null, \"JSON_UNQUOTE 사용하여 따옴표 제거된 문자열을 추출한 후\"), \"\\n\", React.createElement(_components.li, null, \"like 문으로 사용하면 정확한 결과를 얻을 수 있다\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"LIKE 비교 시 문제가 발생\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"SELECT JSON_EXTRACT('{\\\"datetime\\\": \\\"2025-03-12\\\"}', '$.datetime') LIKE '2025-03%';\\n\")), \"\\n\", React.createElement(_components.p, null, \"원래 조회하려던 조건에서도 \", React.createElement(_components.code, null, \"JSON_UNQUOTE\"), \" 를 제거하니 조회 실패되었다\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/server/database/mysql/2025-03-13-mysql-jsonUnquote.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","code","pre","ul","li","blockquote","_provideComponents","components","React","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}