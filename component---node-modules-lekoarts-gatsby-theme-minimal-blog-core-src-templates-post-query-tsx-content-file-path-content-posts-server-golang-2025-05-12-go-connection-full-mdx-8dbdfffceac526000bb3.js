"use strict";(self.webpackChunkgwiyeom_blog=self.webpackChunkgwiyeom_blog||[]).push([[5670],{360:function(e,n,t){t.r(n),t.d(n,{Head:function(){return o.p},default:function(){return u}});var l=t(6540),r=t(8453);function c(e){const n=Object.assign({h1:"h1",p:"p",pre:"pre",code:"code"},(0,r.RP)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.h1,null,"배경"),"\n",l.createElement(n.p,null,"DB 부하가 발생하는 상황에서"),"\n",l.createElement(n.p,null,"디비에 대기 상태 건들이 계속 유지되고 있어서\n일단 풀 안에 놀고 있는 연결 수\n(SetMaxIdleConns)를 10에서 2로 줄였다\n부하에 대한 여러 원인이 있기때문에\n큰 효과는 없었지만\n커넥션풀이 정확이 무엇이며 어떻게 설정하는지 정리해보자"),"\n",l.createElement(n.h1,null,"DB 커넥션풀"),"\n",l.createElement(n.p,null,"서버와 DB는 네트워크 통신을 통해 연결되며\n네트워크 연결을 생성하고 종료하는데 0.5~1초 소요된다\n연결,종료 시간은 전체 응답 시간에 영향을 준다\n응답 시간이 길어지면 전체 처리량 떨어진다\n매 요청마다 DB 연결하고 종료하면 트래픽 급증시 처리량 떨어진다\n이 문제를 피하기 위해 커넥션풀 사용한다"),"\n",l.createElement(n.p,null,"DB 커넥션 풀은 연결된 커넥션을 미리 생성해서 보관한다\n애플리케이션은 DB 작업이 필요할 때 풀에서 커넥션을 가져와 사용 작업이 끝나면 다시 풀에 반환한다\n이미 연결된 커넥션을 재사용하기 떄문에 응답 시간이 줄어드는 장점이 있다"),"\n",l.createElement(n.h1,null,"golang 에서 xorm 에서 커넥션 풀 설정"),"\n",l.createElement(n.p,null,"xormDb.SetMaxOpenConns(10) //최대 동시 연결 수\nxormDb.SetMaxIdleConns(2) //사용되지 않고 대기 상태(idle)\nxormDb.SetConnMaxLifetime(10 * time.Minute) //하나의 연결을 최대 10분까지만 재사용"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"\n\n")))}var a=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.RP)(),e.components);return n?l.createElement(n,e,l.createElement(c,e)):c(e)},o=t(7292);function u(e){return l.createElement(o.A,e,l.createElement(a,e))}o.A}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-golang-2025-05-12-go-connection-full-mdx-8dbdfffceac526000bb3.js.map