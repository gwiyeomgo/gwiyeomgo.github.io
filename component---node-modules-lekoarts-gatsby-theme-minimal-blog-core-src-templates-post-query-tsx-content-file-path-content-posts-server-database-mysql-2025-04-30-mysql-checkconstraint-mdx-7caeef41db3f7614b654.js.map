{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-database-mysql-2025-04-30-mysql-checkconstraint-mdx-7caeef41db3f7614b654.js","mappings":"kNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,GAAI,KACJC,GAAI,KACJC,IAAK,MACLC,KAAM,OACNC,WAAY,eACXC,EAAAA,EAAAA,MAAsBX,EAAMY,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBZ,EAAYG,GAAI,KAAM,MAAO,KAAMS,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,mFAAoF,KAAMQ,EAAAA,cAAoBZ,EAAYK,GAAI,KAAM,KAAMO,EAAAA,cAAoBZ,EAAYM,GAAI,KAAM,oCAAqC,KAAMM,EAAAA,cAAoBZ,EAAYM,GAAI,KAAM,oCAAqC,KAAMM,EAAAA,cAAoBZ,EAAYM,GAAI,KAAM,2CAA4C,MAAO,KAAMM,EAAAA,cAAoBZ,EAAYG,GAAI,KAAM,iDAAkD,KAAMS,EAAAA,cAAoBZ,EAAYO,IAAK,KAAMK,EAAAA,cAAoBZ,EAAYQ,KAAM,KAAM,iLAAkL,KAAMI,EAAAA,cAAoBZ,EAAYG,GAAI,KAAM,oCAAqC,KAAMS,EAAAA,cAAoBZ,EAAYO,IAAK,KAAMK,EAAAA,cAAoBZ,EAAYQ,KAAM,KAAM,6GAA8G,KAAMI,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,wFAAyF,KAAMQ,EAAAA,cAAoBZ,EAAYO,IAAK,KAAMK,EAAAA,cAAoBZ,EAAYQ,KAAM,KAAM,gKAAiK,KAAMI,EAAAA,cAAoBZ,EAAYG,GAAI,KAAM,yCAA0C,KAAMS,EAAAA,cAAoBZ,EAAYK,GAAI,KAAM,KAAMO,EAAAA,cAAoBZ,EAAYM,GAAI,KAAM,2BAA4B,MAAO,KAAMM,EAAAA,cAAoBZ,EAAYS,WAAY,KAAM,KAAMG,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,+BAAgC,MAAO,KAAMQ,EAAAA,cAAoBZ,EAAYO,IAAK,KAAMK,EAAAA,cAAoBZ,EAAYQ,KAAM,KAAM,oTAAqT,KAAMI,EAAAA,cAAoBZ,EAAYS,WAAY,KAAM,KAAMG,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,iCAAkC,MAAO,KAAMQ,EAAAA,cAAoBZ,EAAYO,IAAK,KAAMK,EAAAA,cAAoBZ,EAAYQ,KAAM,KAAM,8TACriF,CAKA,MAJA,SAAoBT,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOc,QAASC,GAAab,OAAOC,OAAO,CAAC,GAAGQ,EAAAA,EAAAA,MAAsBX,EAAMY,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWf,EAAOa,EAAAA,cAAoBd,EAAmBC,IAAUD,EAAkBC,EAC9H,E,UCde,SAASgB,EAAiBhB,GACvC,OAAOa,EAAAA,cAAoBI,EAAAA,EAAejB,EAAOa,EAAAA,cAAoBK,EAAqBlB,GAC5F,CAHAiB,EAAAA,C","sources":["webpack://gwiyeom-blog/./content/posts/server/database/mysql/2025-04-30-mysql-CHECKCONSTRAINT.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"기존 테이블에서 물리적으로 unique key 로 사용하던 out_id 필드가 있었는데\\n기능이 확장되면서 group_id 가 추가 예정이있다\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"out_id 가 있는 경우 group_id는 존재하지 않음\"), \"\\n\", React.createElement(_components.li, null, \"group_id 가 있는 경우 out_id는 존재하지 않음\"), \"\\n\", React.createElement(_components.li, null, \"group_id와 out_id는 서로 동시에 존재하지 않음 (상호배타)\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, \"MySQL 8 이상 CHECK 제약 (IS NULL XOR IS NOT NULL)\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"ALTER TABLE test_table\\nADD CONSTRAINT chk_group_out_exclusive\\nCHECK (\\n  (group_id IS NOT NULL AND out_id IS NULL) OR\\n  (group_id IS NULL AND out_id IS NOT NULL)\\n);\\n\\n\")), \"\\n\", React.createElement(_components.h1, null, \"존재하는 값의 유일성 보장 (단, NULL 중복은 허용됨)\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"ALTER TABLE test_table\\nADD UNIQUE KEY uniq_out_id (out_id),\\nADD UNIQUE KEY uniq_group_id (group_id);\\n\")), \"\\n\", React.createElement(_components.p, null, \"하지만 NULL 중복은 막지 못함  => 유일성 보장 X\\nMySQL에서 NULL ≠ NULL 이므로\\nUNIQUE(out_id)는 중복으로 보지 않음\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"INSERT INTO test_table (group_id, out_id) VALUES ('G1', NULL); -- OK\\nINSERT INTO test_table (group_id, out_id) VALUES ('G2', NULL); -- OK (UNIQUE 위반 아님)\\n\")), \"\\n\", React.createElement(_components.h1, null, \"트리거 추가 (NULL 중복까지 완전히 막음 (INSERT 기준))\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"트리거 적용시 insert 할때 마다 발동\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"out_id IS NOT NULL일 때 중복 막기\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"CREATE TRIGGER trg_out_id_unique\\nBEFORE INSERT ON test_table\\nFOR EACH ROW\\nBEGIN\\n  IF NEW.out_id IS NOT NULL THEN\\n    IF EXISTS (SELECT 1 FROM test_table WHERE out_id = NEW.out_id) THEN\\n      SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Duplicate out_id not allowed';\\n    END IF;\\n  END IF;\\nEND;\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"group_id IS NOT NULL일 때 중복 막기\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"CREATE TRIGGER trg_group_id_unique\\nBEFORE INSERT ON test_table\\nFOR EACH ROW\\nBEGIN\\n  IF NEW.group_id IS NOT NULL THEN\\n    IF EXISTS (SELECT 1 FROM test_table WHERE group_id = NEW.group_id) THEN\\n      SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Duplicate group_id not allowed';\\n    END IF;\\n  END IF;\\nEND;\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/server/database/mysql/2025-04-30-mysql-CHECKCONSTRAINT.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","ul","li","pre","code","blockquote","_provideComponents","components","React","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}