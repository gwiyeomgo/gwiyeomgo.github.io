{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-golang-2022-11-02-go-grpc-framework-mdx-b39452a89650467fa91f.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/server/golang/2022-11-02-go-grpc-framework.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    del: \"del\",\n    ol: \"ol\",\n    li: \"li\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"grpc 가 뭐죠? Remote Procedure Call (RPC) framework\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"gRPC is a modern open source high performance Remote Procedure Call (RPC) framework that can run in any environment\\nhttps://grpc.io/\\n\")), \"\\n\", React.createElement(_components.p, null, \"REST는 HTTP 기반의 요청/응답 방식이고\\ngRPC는 HTTP/2 기반에서 프로토콜 버퍼를 사용한 고성능 바이너리 스트리밍 방식이다.\"), \"\\n\", React.createElement(_components.h1, null, \"grpc 특징\"), \"\\n\", React.createElement(_components.p, null, \"원격 프로시저 호출\\n마이크로서비스\\n=> 구글에서 rpc 를 잘 쓸 수 있도록 한 것\\nhttp 가 너무 느려서쓴다\\nremote 프로시저 콜\\n서로 인터페이스 규약을 정해놓고\\n어떤 것이 자신을 불렀는지 남길 수 있음=> grpc 사용\"), \"\\n\", React.createElement(_components.h1, null, \"grpc 와 http API 를 비교\"), \"\\n\", React.createElement(_components.p, null, \"http 프로토콜\\nrest  api 는\"), \"\\n\", React.createElement(_components.p, null, \"grpc 가 http 2 를써서 1.1 보다 좋아진 점은\\ngrpc 가 양방향통신이 가능\\ngrpc 는 byte 기반\"), \"\\n\", React.createElement(_components.p, null, \"postman 의 grpc 요청 기능\\ngo 버전도 올리자\"), \"\\n\", React.createElement(_components.p, null, \"go 로 원격 메서드 실행을 원한다면 특정 언어에 얽매이지 않도록\\ngrpc 와 같은 표준 프로토콜을 사용\"), \"\\n\", React.createElement(_components.p, null, \"rest full 하게 쓰고 있는데...\"), \"\\n\", React.createElement(_components.p, null, \"마이크로 서비스간에 통신 퍼포먼스를 생각하면\\nrpc remote prosiger call\\n을 쓰다가\"), \"\\n\", React.createElement(_components.p, null, \"http\"), \"\\n\", React.createElement(_components.h1, null, \"tls 프로토콜\"), \"\\n\", React.createElement(_components.p, null, \"protocal 규약\"), \"\\n\", React.createElement(_components.p, null, \"network layor\\nosi 7 계층\"), \"\\n\", React.createElement(_components.p, null, \"tls 프로토콜\\ngrpc가 tls 로 통신한다\\n그래서 눈으로 보이지 않음\\ntls 방식으로 변환해서 간다\\ngrpc 저수준의 방식\\n성능이 보장된 형태\"), \"\\n\", React.createElement(_components.p, null, \"json대신 protocol buffers (Protobuf)\\nhttp 2 를 쓴다\\nssl security => tls 기반에서 보안\"), \"\\n\", React.createElement(_components.p, null, \"비동기로 작동?\"), \"\\n\", React.createElement(_components.p, null, \"unary\\n=> 단방향으로\"), \"\\n\", React.createElement(_components.p, null, \"serverStreaming\"), \"\\n\", React.createElement(_components.p, null, \"여러번 스트리밍으로 보낸다\"), \"\\n\", React.createElement(_components.p, null, \"client 스트리밍\"), \"\\n\", React.createElement(_components.p, null, \"bi-directional Streaming\"), \"\\n\", React.createElement(_components.p, null, \"스트림으로 보내면 스트림으로 받음\"), \"\\n\", React.createElement(_components.p, null, \"protocal buffers\"), \"\\n\", React.createElement(_components.p, null, \"의 장점은 서로 다른 언어끼리 grpc 로 통신하면서 사용할 수 있다\"), \"\\n\", React.createElement(_components.p, null, \"언어 독립적이고 확장성있다\"), \"\\n\", React.createElement(_components.p, null, \"프로토컬퍼퍼의 Message,Service  두가지를 규약해 놓으면 통신할 수 있다\"), \"\\n\", React.createElement(_components.h1, null, \"왜? 쓸까요?\"), \"\\n\", React.createElement(_components.p, null, \"마이크로 서비스 connection\\n스트리밍할 수 있음\\n멀티 랭기지 할 수 있다\"), \"\\n\", React.createElement(_components.p, null, \"front 에서 동영상을 주고받을 때 realtime streaming 할 수 있다\\n\", React.createElement(_components.code, null, \"go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest\"), \"\\n\", React.createElement(_components.code, null, \"go install github.com/golang/protobuf/protoc-gen-go@latest\"), \"\\n깔고 프로토 버프를 깔아보자\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"go install google.golang.org/protobuf/cmd/protoc-gen-go\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative ./v0/gwiyeomgo/user.proto\")), \"\\n\", React.createElement(_components.h1, null, \"20221216\"), \"\\n\", React.createElement(_components.p, null, \".protoBuf\"), \"\\n\", React.createElement(_components.p, null, \"언어와 상관없이 쓸 수 있는 정의 서\\ndata 를 message 로 정의\\n네이밍은 카멜케이스\\n필드는 스네이크케리스로 쓴다\\n필드 넘버를 추가 (가능하면 바꾸지 않는다)\"), \"\\n\", React.createElement(_components.p, null, \"정보를 바이트로 바낼때\\n1\", React.createElement(_components.del, null, \"15 는 1바이트 이고\\n16\"), \" 이후는 2바이트로 왠만해서 1~15 번호를 써라\"), \"\\n\", React.createElement(_components.p, null, \"프로토3 최신 버전 사용\\n기본은 프로토2로 사용시 꼭 3 로 쓰기\"), \"\\n\", React.createElement(_components.p, null, \"repeated 를 쓰고 pack-ture\\n를 써서 배열을 보냏 수 있다\"), \"\\n\", React.createElement(_components.p, null, \"grpc 는 relase 를 해야함\\nclientService 만들어서\"), \"\\n\", React.createElement(_components.p, null, \"get 이름\\ngetList\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"protobuf 파일 만들기 (정의서 만듬)\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"protoc로 컴파일 (언어별로 컴파일해서 go에서 쓸 수 있도록 만듬)\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"grpc 로 통신할 수 있도록 서버와 클라이언트 만들어서 통신을 했다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"postman 으로 테스트 하기\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"http 로 통신을 할 수 있도록 게이트 웨이를 넣음 (http 통신을 받은 후 => 게이트 웨이 => grpc )\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"gRPC 4가지 통신 방식 중\\n유너리?\\n보내면 받는 http 1.0 REST와 유사\\n스트림으로 양쪽 으로 통신하는 것도 가능..\"), \"\\n\", React.createElement(_components.p, null, \"클라이언트가 1개의 요청(request)을 보내고\\n서버가 1개의 응답(response)을 돌려주는 방식  1:1 통신\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"Client ──► Request ──► Server\\nClient ◄── Response ◄── Server\\n\")), \"\\n\", React.createElement(_components.p, null, \"6.grpc 미들웨어를 넣을 수 있다\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://devjin-blog.com/golang-grpc-server-4/\"\n  }, \"https://devjin-blog.com/golang-grpc-server-4/\"), \"\\napi 콜할 (request) 때 middleware 에서 grpc\"), \"\\n\", React.createElement(_components.h1, null, \"출처 모음\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://chacha95.github.io/2020-06-15-gRPC1/\"\n  }, \"https://chacha95.github.io/2020-06-15-gRPC1/\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://devjin-blog.com/golang-grpc-server-1/\"\n  }, \"https://devjin-blog.com/golang-grpc-server-1/\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://grpc.io/docs/protoc-installation/\"\n  }, \"https://grpc.io/docs/protoc-installation/\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://medium.com/naver-cloud-platform/nbp-%EA%B8%B0%EC%88%A0-%EA%B2%BD%ED%97%98-%EC%8B%9C%EB%8C%80%EC%9D%98-%ED%9D%90%EB%A6%84-grpc-%EA%B9%8A%EA%B2%8C-%ED%8C%8C%EA%B3%A0%EB%93%A4%EA%B8%B0-1-39e97cb3460\"\n  }, \"https://medium.com/naver-cloud-platform/nbp-%EA%B8%B0%EC%88%A0-%EA%B2%BD%ED%97%98-%EC%8B%9C%EB%8C%80%EC%9D%98-%ED%9D%90%EB%A6%84-grpc-%EA%B9%8A%EA%B2%8C-%ED%8C%8C%EA%B3%A0%EB%93%A4%EA%B8%B0-1-39e97cb3460\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/server/golang/2022-11-02-go-grpc-framework.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","pre","code","p","del","ol","li","a","_provideComponents","components","React","href","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}