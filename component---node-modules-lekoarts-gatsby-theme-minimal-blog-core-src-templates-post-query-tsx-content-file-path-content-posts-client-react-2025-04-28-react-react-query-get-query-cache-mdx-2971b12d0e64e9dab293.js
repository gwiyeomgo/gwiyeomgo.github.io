"use strict";(self.webpackChunkgwiyeom_blog=self.webpackChunkgwiyeom_blog||[]).push([[4923],{820:function(e,t,n){n.r(t),n.d(t,{Head:function(){return u.p},default:function(){return o}});var r=n(6540),l=n(8453);function a(e){const t=Object.assign({h1:"h1",p:"p",pre:"pre",code:"code",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,l.RP)(),e.components);return r.createElement(r.Fragment,null,r.createElement(t.h1,null,"배경"),"\n",r.createElement(t.p,null,"프론트팀에서 react-query 를 사용중이다\n운영,staging 환경에서 react-query 를 통해\n어떤 점이 개선되었고 상태 변화등 알 수 있는지\n방법이 없을지 궁금했고\n왜 react-query를 썼는지 뭐가 좋은 건지 알고 싶었다..\nreact-query 를 쓰면\nQuery 상태 변화 이벤트를 구독해서\n로깅하거나 별도 처리도 가능하다고 해서\n한번 기록해봅니다."),"\n",r.createElement(t.h1,null,"사용 예시"),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,"export interface QueryCacheNotifyEvent {\n  type: 'added' | 'removed' | 'updated' | 'observerAdded' | 'observerRemoved' | 'observerResultsUpdated';\n  query: Query<any, any, any, any>;\n}\n")),"\n",r.createElement(t.table,null,r.createElement(t.thead,null,r.createElement(t.tr,null,r.createElement(t.th,{align:"left"},"type 값"),r.createElement(t.th,{align:"left"},"의미"))),r.createElement(t.tbody,null,r.createElement(t.tr,null,r.createElement(t.td,{align:"left"},r.createElement(t.code,null,"added")),r.createElement(t.td,{align:"left"},"새로운 Query가 추가됐을 때")),r.createElement(t.tr,null,r.createElement(t.td,{align:"left"},r.createElement(t.code,null,"removed")),r.createElement(t.td,{align:"left"},"Query가 삭제됐을 때")),r.createElement(t.tr,null,r.createElement(t.td,{align:"left"},r.createElement(t.code,null,"updated")),r.createElement(t.td,{align:"left"},"Query 데이터가 변경됐을 때")),r.createElement(t.tr,null,r.createElement(t.td,{align:"left"},r.createElement(t.code,null,"observerAdded")),r.createElement(t.td,{align:"left"},"이 Query를 구독하는 컴포넌트(observer)가 추가됐을 때")),r.createElement(t.tr,null,r.createElement(t.td,{align:"left"},r.createElement(t.code,null,"observerRemoved")),r.createElement(t.td,{align:"left"},"observer가 빠졌을 때")),r.createElement(t.tr,null,r.createElement(t.td,{align:"left"},r.createElement(t.code,null,"observerResultsUpdated")),r.createElement(t.td,{align:"left"},"observer가 보고 있는 결과가 업데이트됐을 때")))),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,"import { useEffect } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport type { QueryCacheNotifyEvent } from '@tanstack/react-query';\n\nfunction QueryLogger() {\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    const unsubscribe = queryClient.getQueryCache().subscribe((event: QueryCacheNotifyEvent) => {\n      console.log('Query event:', event);\n\n      if (event.type === 'updated' && event.query) {\n        const fetchStatus = event.query.state.fetchStatus;\n        const fetchTime = event.query.state.dataUpdatedAt;\n        const queryKey = event.query.queryKey;\n\n        // 여기서 원하는 로깅 서버로 POST 요청 보내기\n        // sendLogToServer({ fetchStatus, fetchTime, queryKey });\n      }\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [queryClient]);\n\n  return null;\n}\n\nexport default QueryLogger;\n\n")))}var c=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,l.RP)(),e.components);return t?r.createElement(t,e,r.createElement(a,e)):a(e)},u=n(7292);function o(e){return r.createElement(u.A,e,r.createElement(c,e))}u.A}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-client-react-2025-04-28-react-react-query-get-query-cache-mdx-2971b12d0e64e9dab293.js.map