{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-database-mysql-2025-04-08-mysql-tinyint-mdx-e2644ca606c9a015d8fc.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/server/database/mysql/2025-04-08-mysql-tinyint.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h3: \"h3\",\n    p: \"p\",\n    br: \"br\",\n    code: \"code\",\n    hr: \"hr\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h3, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"새로운 프로젝트를 시작했다.\", React.createElement(_components.br), \"\\n\", \"DB 설계를 하시면서 작은 숫자 유형을 \", React.createElement(_components.code, null, \"TINYINT\"), \"로 쓰자고 하셨다.\", React.createElement(_components.br), \"\\n\", \"기존 Golang 코드에는 \", React.createElement(_components.code, null, \"bool\"), \" 타입으로 사용했었는데\\nDB에는 왜 굳이 \", React.createElement(_components.code, null, \"TINYINT\"), \"를 쓰는 걸까 궁금했다.\"), \"\\n\", React.createElement(_components.p, null, \"그래서 간단히 정리해봤다.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h3, null, \"1. MySQL에서는 다양한 정수 타입\"), \"\\n\", React.createElement(_components.p, null, \"MySQL에서는 다양한 정수 타입을 제공한다.\", React.createElement(_components.br), \"\\n\", \"각 타입은 저장할 수 있는 숫자의 범위와 차지하는 바이트 수가 다르다.\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"타입\"), React.createElement(_components.th, null, \"바이트\"), React.createElement(_components.th, null, \"범위 (SIGNED)\"), React.createElement(_components.th, null, \"범위 (UNSIGNED)\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, \"TINYINT\"), React.createElement(_components.td, null, \"1\"), React.createElement(_components.td, null, \"-128 ~ 127\"), React.createElement(_components.td, null, \"0 ~ 255\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"SMALLINT\"), React.createElement(_components.td, null, \"2\"), React.createElement(_components.td, null, \"-32,768 ~ 32,767\"), React.createElement(_components.td, null, \"0 ~ 65,535\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"INT\"), React.createElement(_components.td, null, \"4\"), React.createElement(_components.td, null, \"약 -21억 ~ 21억\"), React.createElement(_components.td, null, \"0 ~ 약 42억\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"BIGINT\"), React.createElement(_components.td, null, \"8\"), React.createElement(_components.td, null, \"약 ±9경\"), React.createElement(_components.td, null, \"0 ~ 약 18경\")))), \"\\n\", React.createElement(_components.p, null, \"→ 이처럼 \", React.createElement(_components.code, null, \"TINYINT\"), \"는 아주 작은 숫자를 저장할 때 유용하다.\", React.createElement(_components.br), \"\\n\", \"→ 필요 이상으로 큰 타입을 쓰면 공간 낭비가 발생한다.ㅌㅋ\"), \"\\n\", React.createElement(_components.h3, null, \"2. \", React.createElement(_components.code, null, \"BIGINT\"), \", \", React.createElement(_components.code, null, \"TINYINT\"), \"의 차이점은?\"), \"\\n\", React.createElement(_components.p, null, \"MySQL에는 \", React.createElement(_components.code, null, \"BOOLEAN\"), \" 타입이 있지만 내부적으로는 그냥 \", React.createElement(_components.code, null, \"TINYINT(1)\"), \"로 처리된다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"ALTER TABLE members ADD COLUMN promotion_agreed BOOLEAN NOT NULL DEFAULT TRUE;\\n\")), \"\\n\", React.createElement(_components.p, null, \"실제 테이블에서는 이렇게 보인다 Type: tinyint(1)이다\\n즉, \", React.createElement(_components.code, null, \"BOOLEAN\"), \"은 단순한 alias일 뿐 결국 저장은 \", React.createElement(_components.code, null, \"TINYINT\"), \"로 된다.\\n그래서 많은 경우 그냥 \", React.createElement(_components.code, null, \"TINYINT(1)\"), \"을 직접 쓰기도 한다.\"), \"\\n\", React.createElement(_components.h3, null, \"3. 실제 사용 코드\"), \"\\n\", React.createElement(_components.p, null, \"기존 Golang 코드에서는 이런 식으로 되어 있었다:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"type Member struct {\\n  PromotionAgreed bool `db:\\\"promotion_agreed\\\"`\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"그리고 MySQL에는 다음과 같이 생성했다:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"ALTER TABLE members ADD COLUMN promotion_agreed TINYINT(1) NOT NULL DEFAULT 1;\\n\")), \"\\n\", React.createElement(_components.p, null, \"Golang의 \", React.createElement(_components.code, null, \"bool\"), \" 타입과 MySQL의 \", React.createElement(_components.code, null, \"TINYINT(1)\"), \"는 자연스럽게 매핑된다.\", React.createElement(_components.br), \"\\n\", \"ORM이나 드라이버들이 알아서 \", React.createElement(_components.code, null, \"0 ↔ false\"), \", \", React.createElement(_components.code, null, \"1 ↔ true\"), \"로 변환\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h3, null, \"4. 결론\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"TINYINT\"), \"는 아주 작은 숫자(특히 0 또는 1)를 저장할 때 메모리를 절약할 수 있다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"BOOLEAN\"), \"도 결국 \", React.createElement(_components.code, null, \"TINYINT(1)\"), \"로 처리되므로 사실상 동일하다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"bool\"), \"을 다루는 대부분의 코드에서 DB에는 \", React.createElement(_components.code, null, \"TINYINT(1)\"), \"을 쓰는 게 일반적이다.\"), \"\\n\", React.createElement(_components.li, null, \"큰 수가 필요하지 않다면, 작은 타입을 쓰는 습관이 성능과 유지보수에 좋다!\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.p, null, \"처음엔 BOOLEAN 타입이 있으니 그냥 쓰면 되는 줄 알았다.\\n근데 알고 보니 MySQL에서는 BOOLEAN도 결국 TINYINT(1)로 저장된다고 한다.\\nMySQL의 BOOLEAN은 사실 0과 1뿐 아니라 다른 숫자도 들어갈 수 있어서\\n참/거짓만 다루는 진짜 불리언 타입은 아니다\\n제약 조건 없이 아무 숫자나 들어가서 오용될 수 있다고 한다!\\n그래서 차라리 혼동을 줄이고 명확하게 표현하기 위해\\n처음부터 TINYINT(1)을 쓰는 게 더 실용적이다\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/server/database/mysql/2025-04-08-mysql-tinyint.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h3","p","br","code","hr","table","thead","tr","th","tbody","td","pre","ul","li","_provideComponents","components","React","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}