"use strict";(self.webpackChunkgwiyeom_blog=self.webpackChunkgwiyeom_blog||[]).push([[3735],{1326:function(e,n,l){l.r(n),l.d(n,{Head:function(){return o.F},default:function(){return a}});var t=l(7294),r=l(1151);function c(e){const n=Object.assign({h2:"h2",h3:"h3",ul:"ul",li:"li",p:"p",pre:"pre",code:"code",blockquote:"blockquote",h1:"h1",a:"a"},(0,r.ah)(),e.components);return t.createElement(t.Fragment,null,t.createElement(n.h2,null,"기본 개념"),"\n",t.createElement(n.h3,null,"파드(Pod)"),"\n",t.createElement(n.ul,null,"\n",t.createElement(n.li,null,"배포할 수 있는 가장 작은 단위"),"\n",t.createElement(n.li,null,"컨테이너 = 프로세스"),"\n",t.createElement(n.li,null,"파드 = 논리적 호스트"),"\n"),"\n",t.createElement(n.h3,null,"노드(Node)"),"\n",t.createElement(n.ul,null,"\n",t.createElement(n.li,null,"물리적 호스트 (여러 개의 파드를 실행 가능)"),"\n"),"\n",t.createElement(n.h3,null,"파드 셋 관리"),"\n",t.createElement(n.ul,null,"\n",t.createElement(n.li,null,"컨트롤러"),"\n"),"\n",t.createElement(n.h3,null,"카인드(Kind)"),"\n",t.createElement(n.ul,null,"\n",t.createElement(n.li,null,"도커 컨테이너를 노드로 사용하여 로컬 쿠버네티스 클러스터를 실행"),"\n",t.createElement(n.li,null,"카인드 사용하려면 도커 설치 필요"),"\n"),"\n",t.createElement(n.h2,null,"설치 및 기본 명령어"),"\n",t.createElement(n.h3,null,"kubectl 설치"),"\n",t.createElement(n.p,null,"쿠버네티스 클러스터에 명령을 보내는 CLI 도구"),"\n",t.createElement(n.pre,null,t.createElement(n.code,null,"brew install kubectl\r\nkubectl version\n")),"\n",t.createElement(n.pre,null,t.createElement(n.code,null,"https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/\r\nhttps://yuls-with-ai.tistory.com/419\n")),"\n",t.createElement(n.h3,null,"golang 으로  kind(kubernetes in Docker) 설치"),"\n",t.createElement(n.p,null,t.createElement(n.code,null,"go install sigs.k8s.io/kind@latest")),"\n",t.createElement(n.h2,null,"로컬에서 Kind 클러스터 생성 및 관리"),"\n",t.createElement(n.p,null,"도커 이미지를 빌드하고\r\nKind 클러스터에 로드한 다음\r\nHelm을 사용하여 파드를 배포하고\r\n로컬에서 실행할 수 있는 상태가 됩니다"),"\n",t.createElement(n.blockquote,null,"\n",t.createElement(n.p,null,"Kind 클러스터 생성 정보 확인"),"\n"),"\n",t.createElement(n.p,null,"Kind를 사용하여 로컬에서 Kubernetes 클러스터를 생성\r\n",t.createElement(n.code,null,"kind create cluster"),"\r\nKubernetes 클러스터 정보 확인허는 명령어로 Kind 클러스터의 정보를 확인합니다.\r\n",t.createElement(n.code,null,"kubectl cluster-info"),"\r\n현재 로컬 머신의 Docker 엔진에서 실행 중인 컨테이너 목록이 표시\r\n",t.createElement(n.code,null,"docker ps")),"\n",t.createElement(n.blockquote,null,"\n",t.createElement(n.p,null,"도커 어플리케이션을 실행"),"\n"),"\n",t.createElement(n.p,null,"도커 이미지 빌드(현재 디렉토리에서 Docker 이미지를 빌드)\r\n",t.createElement(n.code,null,"docker build -t github.com/test/proglog:0.0.1")),"\n",t.createElement(n.p,null,"Kind 클러스터에 이미지 로드\r\n이전에 빌드한 Docker 이미지를 Kind 클러스터에 로드\r\n클러스터 내에서 이 이미지를 사용할 수 있음\r\n",t.createElement(n.code,null,"kind load docker-image github.com/test/proglog:0.0.1")),"\n",t.createElement(n.blockquote,null,"\n",t.createElement(n.p,null,"Helm을 사용한 파드 배포"),"\n"),"\n",t.createElement(n.p,null,"Helm 차트를 템플릿으로 변환\r\n",t.createElement(n.code,null,"helm template proglog deploy/proglog")),"\n",t.createElement(n.p,null,"Helm 차트를 사용하여 Kubernetes 클러스터에 프로그램을 배포\r\n",t.createElement(n.code,null,"helm install proglog deploy/proglog")),"\n",t.createElement(n.p,null,"배포한 파드의 상태를 확인\r\n",t.createElement(n.code,null,"kubectl get pods")),"\n",t.createElement(n.p,null,"Kubernetes 파드에 로컬 포트 포워딩을 설정\r\n이를 통해 로컬 머신에서 해당 파드의 포트로 접속할 수 있게 됩니다.\r\n",t.createElement(n.code,null,"kubectl port-forward pod/proglog-0 8400")),"\n",t.createElement(n.h1,null,"실습: 개발 서버에서 Redis 데이터 조회"),"\n",t.createElement(n.h3,null,"배경"),"\n",t.createElement(n.p,null,"쿠버네티스를 사용해 개발 서버를 운영중이다. (20240517)\r\n개발 과정에서 redis 에 접속해 데이터를 조회해애 했다\r\n실제 수거 간사님들이 로그인해서 업무를 조회할때 redis 의 값이 저장되기 떄문에\r\n모두 잘 들어오셔서 업무에 차질이 없도록 확인해야 했다"),"\n",t.createElement(n.blockquote,null,"\n",t.createElement(n.p,null,"개발서버 접속"),"\n"),"\n",t.createElement(n.p,null,t.createElement(n.code,null,"ssh user @oo.oo.oo.oo")),"\n",t.createElement(n.blockquote,null,"\n",t.createElement(n.p,null,"쿠버네티스에 실행 중인 pod 목록을 조회"),"\n"),"\n",t.createElement(n.p,null,t.createElement(n.code,null,"kubectl --context={context_name} -n {context_name} get pods"),"\r\n로 조회시 목록이 나오며 NAME 으로 단건 조회 접속 가능하다"),"\n",t.createElement(n.blockquote,null,"\n",t.createElement(n.p,null,"특정 파드 조회"),"\n"),"\n",t.createElement(n.p,null,t.createElement(n.code,null,"단건: kubectl --context={context_name} -n {context_name} get pods | grep {pod-name}")),"\n",t.createElement(n.blockquote,null,"\n",t.createElement(n.p,null,"파드 내에서 Redis-CLI 접속"),"\n"),"\n",t.createElement(n.p,null,t.createElement(n.code,null,"kubectl --context={context_name} -n {context_name} exec -it {pod-name} redis-cli"),"\r\n(참고)Bash 쉘을 통해 접속\r\n",t.createElement(n.code,null,"kubectl --context={context_name} -n {context_name} exec -it {pod-name}  -- /bin/bash")),"\n",t.createElement(n.blockquote,null,"\n",t.createElement(n.p,null,"Redis-CLI에서 인증 문제 해결"),"\n"),"\n",t.createElement(n.h1,null,"(error) NOAUTH Authentication required. 발생 시"),"\n",t.createElement(n.p,null,t.createElement(n.code,null,"auth {비밀번호}")," 입력해 해결"),"\n",t.createElement(n.blockquote,null,"\n",t.createElement(n.p,null,"(참고) Redis 키값 조회"),"\n"),"\n",t.createElement(n.p,null,"운영배포 후 모두 로그인하셔서 redis 에서 정보를 저장하고 있는지 확인\r\n",t.createElement(n.code,null,"keys *test*")," 로  키값에 test 가 있는 모든 키를 조회"),"\n",t.createElement(n.p,null,t.createElement(n.a,{href:"https://freeblogger.tistory.com/10"},"https://freeblogger.tistory.com/10")))}var u=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?t.createElement(n,e,t.createElement(c,e)):c(e)},o=l(8804);function a(e){return t.createElement(o.Z,e,t.createElement(u,e))}o.Z}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-infra-2023-08-29-infra-kubernetes-mdx-4fd1f1d0cd227b7fa6ce.js.map