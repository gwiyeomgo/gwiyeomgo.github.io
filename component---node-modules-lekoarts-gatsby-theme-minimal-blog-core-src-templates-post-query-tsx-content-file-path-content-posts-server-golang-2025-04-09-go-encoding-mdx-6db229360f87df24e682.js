"use strict";(self.webpackChunkgwiyeom_blog=self.webpackChunkgwiyeom_blog||[]).push([[8224],{2659:function(e,n,t){t.r(n),t.d(n,{Head:function(){return u.p},default:function(){return m}});var r=t(6540),a=t(8453);function l(e){const n=Object.assign({h1:"h1",p:"p",code:"code",pre:"pre"},(0,a.RP)(),e.components);return r.createElement(r.Fragment,null,r.createElement(n.h1,null,"배경"),"\n",r.createElement(n.p,null,r.createElement(n.code,null,'url.QueryEscape("데이터")'),"를 사용하여\n한글이나 특수문자가 포함된 문자열을 URL에 안전하게 포함시키는 방식으로 인코딩을 해왔습니다\n최근 사용한 방식은 아래와 같다"),"\n",r.createElement(n.p,null,"명확한 책임 분리와 정확한 인코딩/디코딩 처리를 위해 새로운 프로젝트에 적용 예정이다\nnet/url 패키지의 url.Values 타입이나 url.URL 구조체를 활용하면\nRFC 3986에 맞는 포맷으로 정확하게 인코딩할 수 있어서 신뢰성 있는 결과를 제공"),"\n",r.createElement(n.pre,null,r.createElement(n.code,null,'params := url.Values{}\nparams.Add("name", "홍길동") //직관적으로 조립\nparams.Add("age", "30")\n\nfinal := params.Encode()\n// name=%ED%99%8D%EA%B8%B8%EB%8F%99&age=30\n')),"\n",r.createElement(n.h1,null,"디코딩"),"\n",r.createElement(n.pre,null,r.createElement(n.code,null,'u, _ := url.Parse("https://example.com/search?name=%ED%99%8D%EA%B8%B8%EB%8F%99&age=30")\nparams := u.Query()\n\nfmt.Println(params.Get("name")) // 홍길동\n')))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.RP)(),e.components);return n?r.createElement(n,e,r.createElement(l,e)):l(e)},u=t(7292);function m(e){return r.createElement(u.A,e,r.createElement(c,e))}u.A}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-golang-2025-04-09-go-encoding-mdx-6db229360f87df24e682.js.map