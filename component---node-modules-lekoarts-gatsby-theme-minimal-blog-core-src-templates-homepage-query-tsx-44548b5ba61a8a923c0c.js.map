{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-homepage-query-tsx-44548b5ba61a8a923c0c.js","mappings":"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","sources":["webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/list.tsx","webpack://gwiyeom-blog/./src/@lekoarts/gatsby-theme-minimal-blog/texts/bottom.mdx","webpack://gwiyeom-blog/./src/custom/tree.tsx","webpack://gwiyeom-blog/./src/@lekoarts/gatsby-theme-minimal-blog/components/homepage.tsx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/homepage-query.tsx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/homepage.tsx","webpack://gwiyeom-blog/./src/@lekoarts/gatsby-theme-minimal-blog/components/seo.tsx"],"sourcesContent":["/** @jsx jsx */\nimport * as React from \"react\"\nimport { jsx } from \"theme-ui\"\n\ntype ListProps = {\n  children: React.ReactNode\n}\n\nconst List = ({ children }: ListProps) => (\n  <section\n    sx={{\n      mb: [5, 5, 6],\n      ul: { margin: 0, padding: 0 },\n      li: { listStyle: `none`, mb: 3, a: { variant: `links.listItem` } },\n      variant: `section_bottom`,\n    }}\n  >\n    {children}\n  </section>\n)\n\nexport default List\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  return React.createElement(React.Fragment);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import * as React from \"react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport {useEffect} from \"react\";\nimport { Link } from \"gatsby\";\n\ntype FileStructureProps = {\n    data: {\n        allFile: {\n            nodes: {\n                id: string\n                name: string\n                relativePath: string\n                extension: string\n            }[]\n        }\n    }\n}\nconst FilterPath = (input:string)=>{\n    // 1. 확장자 제거 (.mdx 제거)\n    const noExt = input.replace(/\\.mdx$/, \"\");\n\n    // 2. 슬래시로 경로 분리\n    const parts = noExt.split(\"/\");\n\n    // 3. 마지막 두 조각 조합\n    if (parts.length >= 2) {\n        return `/${parts[parts.length - 2]}/${parts[parts.length - 1]}`;\n    } else {\n        return \"\"\n    }\n}\nconst FileStructure = ({ data }: FileStructureProps) => {\n    const [openFolders, setOpenFolders] = React.useState<string[]>([])\n\n    const allowedExtensions = ['mdx']\n\n    // 모든 폴더 경로를 수집하는 함수\n    const getAllFolderPaths = (nodes: any) => {\n        const folderPaths = new Set<string>()\n\n        nodes.forEach((node: any) => {\n            const pathParts = node.relativePath.split('/')\n            // 마지막은 파일명이라서 제외하고 경로만 모음(pathParts.length -1 )\n            for (let i = 1; i < pathParts.length  ; i++) {\n                folderPaths.add(pathParts.slice(0, i).join('/'))\n            }\n        })\n\n        return Array.from(folderPaths)\n    }\n\n    // 컴포넌트 마운트 시 모든 폴더 열기\n    useEffect(() => {\n        setOpenFolders(getAllFolderPaths(data.allFile.nodes))\n    }, [data])\n\n    const renderTree = (nodes: any, parentPath: string = '', level: number = 1) => {\n        const groupedByFolder: any = {}\n\n        nodes.forEach((node: any) => {\n            const pathParts = node.relativePath.split('/')\n            const folderPath = pathParts.slice(0, level).join('/')\n\n            if (!allowedExtensions.includes(node.extension)) return\n\n            if (!groupedByFolder[folderPath]) {\n                groupedByFolder[folderPath] = []\n            }\n            groupedByFolder[folderPath].push(node)\n        })\n\n        return Object.keys(groupedByFolder).map((folderPath) => {\n            const files = groupedByFolder[folderPath]\n            const isLastFile = files.length === 1 // 마지막 파일인지 체크\n            const isFolderOpen = openFolders.includes(folderPath)\n\n            // 레벨에 맞는 스타일 적용\n            const folderStyle = {\n                marginLeft: `${level * 20}px`, // 레벨에 따라 들여쓰기\n                fontWeight: isLastFile ? 'normal' :'bold', // 레벨에 따른 폰트 스타일\n               // color: isFolderOpen ? '#0077cc' : '#333' , // 레벨에 따른 색상\n                cursor: isLastFile ? 'default' : 'pointer', // 마지막 파일일 경우 클릭 비활성화\n            }\n            const fileName=  folderPath.split('/').pop()\n            return (\n                <div key={folderPath}>\n                    <p\n                        style={folderStyle}\n                         onClick={() => {\n                             if (isLastFile) {\n                                 return;\n                             }\n                            if (isFolderOpen) {\n                                setOpenFolders(openFolders.filter(f => f !== folderPath))\n                            } else {\n                                setOpenFolders([...openFolders, folderPath])\n                            }\n                        }}\n                    >\n                        {!isLastFile && (isFolderOpen ? \"▼ \" : \"▶︎ \")}\n                        {\n                            isLastFile ?\n                                <Link to={FilterPath(folderPath)} style={{\n                                    textDecorationLine : \"none\",\n                                    textDecoration : \"none\",\n                                    color:\"black\"\n                                }}>\n                                    {fileName.replace(/\\.mdx$/, \"\")}\n                                </Link> : fileName\n                        }\n                    </p>\n                    {isFolderOpen && (\n                        <div style={{ marginLeft: 40 }}>\n                            {renderTree(files, folderPath, level + 1)}\n                        </div>\n                    )}\n                </div>\n            )\n        })\n    }\n\n    return <div>{renderTree(data.allFile.nodes)}</div>\n}\n\nconst Tree = () => {\n    const data = useStaticQuery(graphql`\n        query {\n            allFile(filter: { sourceInstanceName: { eq: \"content/posts\" } }) {\n                nodes {\n                    id\n                    name\n                    relativePath\n                    extension\n                }\n            }\n        }\n    `)\n\n    return (\n        <FileStructure data={data} />\n    )\n}\n\nexport default Tree\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport { HeadFC, Link } from \"gatsby\"\nimport Layout from \"@lekoarts/gatsby-theme-minimal-blog/src/components/layout\"\nimport Title from \"@lekoarts/gatsby-theme-minimal-blog/src/components/title\"\nimport Listing from \"@lekoarts/gatsby-theme-minimal-blog/src/components/listing\"\nimport List from \"@lekoarts/gatsby-theme-minimal-blog/src/components/list\"\nimport useMinimalBlogConfig from \"@lekoarts/gatsby-theme-minimal-blog/src/hooks/use-minimal-blog-config\"\nimport useSiteMetadata from \"@lekoarts/gatsby-theme-minimal-blog/src/hooks/use-site-metadata\"\nimport replaceSlashes from \"@lekoarts/gatsby-theme-minimal-blog/src/utils/replaceSlashes\"\nimport { visuallyHidden } from \"@lekoarts/gatsby-theme-minimal-blog/src/styles/utils\"\nimport Seo from \"./seo\"\nimport Hero from \"../texts/hero.mdx\"\nimport Bottom from \"../texts/bottom.mdx\"\nimport Tree from \"../../../custom/tree\";\nimport * as React from \"react\";\n\nexport type MBHomepageProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }[]\n}\n\nconst Homepage = ({ posts }: MBHomepageProps) => {\n  const { basePath, blogPath } = useMinimalBlogConfig()\n  const { siteTitle } = useSiteMetadata()\n\n  return (\n    <Layout>\n      <h1 sx={visuallyHidden}>{siteTitle}</h1>\n      <Title text={<h5>전체글</h5>} sx={{ fontSize: [1, 2, 3],fontWeight:500 }} >\n        <Link to={replaceSlashes(`/${basePath}/${blogPath}`)}>제목으로 전체 글 보기</Link>\n      </Title>\n      {/*<Listing posts={posts} showTags={false} />*/}\n        <section style={{marginBottom:20}} sx={{ mb: [5, 6, 7], p: { fontSize: [1, 1, 1], mt: 2 }, variant: `section_hero` }}>\n        <Tree/>\n        </section>\n        <List>\n        <Bottom />\n      </List>\n    </Layout>\n  )\n}\n\nexport default Homepage\n\nexport const Head: HeadFC = () => <Seo />\n","import { graphql } from \"gatsby\"\nimport HomepageComponent, { Head } from \"../components/homepage\"\n\nexport default HomepageComponent\n\nexport { Head }\n\nexport const query = graphql`\n  query ($formatString: String!) {\n    allPost(sort: { date: DESC }, limit: 3) {\n      nodes {\n        slug\n        title\n        date(formatString: $formatString)\n        excerpt\n        timeToRead\n        description\n        tags {\n          name\n          slug\n        }\n      }\n    }\n  }\n`\n","import * as React from \"react\"\nimport Homepage, { Head } from \"../../../components/homepage\"\n\ntype Props = {\n  data: {\n    allPost: any\n    [key: string]: string\n  }\n  [key: string]: any\n}\n\nexport default function MinimalBlogCoreHomepage({ ...props }: Props) {\n  const {\n    data: { allPost },\n  } = props\n\n  return <Homepage posts={allPost.nodes} {...props} />\n}\n\nexport { Head }\n","import * as React from \"react\"\nimport { withPrefix } from \"gatsby\"\nimport useSiteMetadata from \"@lekoarts/gatsby-theme-minimal-blog/src/hooks/use-site-metadata\"\n\ntype SEOProps = {\n  title?: string\n  description?: string\n  pathname?: string\n  image?: string\n  children?: React.ReactNode\n  canonicalUrl?: string\n}\n\nconst Seo = ({\n  title = ``,\n  description = ``,\n  pathname = ``,\n  image = ``,\n  children = null,\n  canonicalUrl = ``,\n}: SEOProps) => {\n  const site = useSiteMetadata()\n\n  const {\n    siteTitle,\n    siteTitleAlt: defaultTitle,\n    siteUrl,\n    siteDescription: defaultDescription,\n    siteImage: defaultImage,\n    author,\n  } = site\n\n  const seo = {\n    title: title ? `${title} | ${siteTitle}` : defaultTitle,\n    description: description || defaultDescription,\n    url: `${siteUrl}${pathname || ``}`,\n    image: `${siteUrl}${image || defaultImage}`,\n  }\n  return (\n    <>\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      <meta property=\"og:title\" content={seo.title} />\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:description\" content={seo.description} />\n      <meta property=\"og:image\" content={seo.image} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:image:alt\" content={seo.description} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      <meta name=\"twitter:image:alt\" content={seo.description} />\n      <meta name=\"twitter:creator\" content={author} />\n      <meta name=\"gatsby-theme\" content=\"@lekoarts/gatsby-theme-minimal-blog\" />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href={withPrefix(`/favicon-32x32.png`)} />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href={withPrefix(`/favicon-16x16.png`)} />\n      <link rel=\"apple-touch-icon\" sizes=\"180x180\" href={withPrefix(`/apple-touch-icon.png`)} />\n      {canonicalUrl ? <link rel=\"canonical\" href={canonicalUrl} /> : null}\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n"],"names":["_ref","children","jsx","sx","mb","ul","margin","padding","li","listStyle","a","variant","_createMdxContent","props","React","wrapper","MDXLayout","Object","assign","_provideComponents","components","FilterPath","input","parts","replace","split","length","FileStructure","data","openFolders","setOpenFolders","allowedExtensions","useEffect","nodes","folderPaths","Set","forEach","node","pathParts","relativePath","i","add","slice","join","Array","from","getAllFolderPaths","allFile","renderTree","parentPath","level","groupedByFolder","folderPath","includes","extension","push","keys","map","files","isLastFile","isFolderOpen","folderStyle","marginLeft","fontWeight","cursor","fileName","pop","key","style","onClick","filter","f","concat","_toConsumableArray","Link","to","textDecorationLine","textDecoration","color","Tree","useStaticQuery","posts","basePath","blogPath","useMinimalBlogConfig","siteTitle","useSiteMetadata","Layout","visuallyHidden","Title","text","fontSize","replaceSlashes","marginBottom","p","mt","List","Bottom","Head","Seo","allPost","Homepage","title","description","pathname","image","canonicalUrl","site","siteTitleAlt","defaultTitle","siteUrl","siteDescription","defaultDescription","siteImage","defaultImage","author","seo","url","name","content","property","rel","type","sizes","href","withPrefix"],"sourceRoot":""}