"use strict";(self.webpackChunkgwiyeom_blog=self.webpackChunkgwiyeom_blog||[]).push([[4348],{1135:function(e,n,t){t.r(n),t.d(n,{Head:function(){return u.p},default:function(){return a}});var l=t(6540),c=t(8453);function r(e){const n=Object.assign({h1:"h1",p:"p",code:"code",blockquote:"blockquote",h3:"h3",ul:"ul",li:"li",pre:"pre",strong:"strong"},(0,c.RP)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.h1,null,"배경"),"\n",l.createElement(n.p,null,"신입사원의 테스트 코드를 리뷰하다가\n테스트를 위해 ",l.createElement(n.code,null,"echo.Context"),"를 직접 만들려고 ",l.createElement(n.code,null,"httptest.NewRequest"),"를 사용해 실제 요청 객체를 생성해서\n코드가 너무 어렵게 느껴졌다"),"\n",l.createElement(n.p,null,"테스트 대상인 서비스 함수에 ",l.createElement(n.code,null,"echo.Context"),"를 직접 넘겨주고 있었고\n서비스 함수를 테스트 하기 위해 신입사원은 ",l.createElement(n.code,null,"echo.Context"),"를 어떻게든 만들어야 했던 것이다."),"\n",l.createElement(n.p,null,'여기서 문득 나도 잠깐 멈칫?!\n"왜 서비스 로직에서 echo.Context를 넘기고 있지?"\n"그냥 context.Context 쓰면 되는 거 아닌가?"'),"\n",l.createElement(n.p,null,"나 역시 ",l.createElement(n.code,null,"echo.Context"),"와 ",l.createElement(n.code,null,"context.Context"),"의 차이를 명확히 정리해 본 적이 없어서 이번 기회에 글로 남겨본다."),"\n",l.createElement(n.blockquote,null,"\n",l.createElement(n.p,null,"echo.Context를 서비스에 넘기면 비즈니스 로직이 웹 프레임워크에 종속되어 테스트가 어려워지고 코드 재사용성이 떨어짐"),"\n"),"\n",l.createElement(n.h3,null,"왜 echo.Context를 서비스에 넘기면 안 좋을까?"),"\n",l.createElement(n.p,null,"에렌 프리먼(Eren Freeman) 의 조언"),"\n",l.createElement(n.blockquote,null,"\n",l.createElement(n.p,null,"에렌 프리먼은 Go 개발에서 컨텍스트(Context) 객체를 서비스 계층에 넘기지 말아야 한다고 언급"),"\n"),"\n",l.createElement(n.p,null,l.createElement(n.code,null,"웹 프레임워크인 echo 와 비즈니스 로직(서비스 계층)을 분리하자는 것!")),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"테스트 어려움: echo.Context는 생성하기 복잡해 mocking이 어려움."),"\n",l.createElement(n.li,null,"의존성 증가: 서비스 계층이 echo에 의존하게 되어 재사용성이 떨어짐."),"\n",l.createElement(n.li,null,"관심사의 분리 위배: 웹 프레임워크와 비즈니스 로직이 결합되어 분리가 안 됨."),"\n"),"\n",l.createElement(n.h1,null,l.createElement(n.code,null,"echo.Context")," vs ",l.createElement(n.code,null,"context.Context")," — 헷갈렸던 내용 정리해본다"),"\n",l.createElement(n.blockquote,null,"\n",l.createElement(n.p,null,l.createElement(n.code,null,"echo.Context"),"란?"),"\n"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,l.createElement(n.code,null,"echo")," 프레임워크에서 제공하는 context"),"\n",l.createElement(n.li,null,"HTTP 요청과 관련된 다양한 정보를 담고 있다."),"\n"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-go"},"func GetMember(ctx echo.Context) error {\n    if err := ctx.Validate(b); err != nil {\n  \t\treturn err\n  \t}\n}\n")),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"요청 객체, 응답 객체, 라우팅 정보, 파라미터 등 다양한 기능이 묶여 있음"),"\n",l.createElement(n.li,null,l.createElement(n.strong,null,"핸들러 함수"),"에서는 아주 유용하지만,"),"\n",l.createElement(n.li,null,l.createElement(n.strong,null,"서비스 계층까지 끌고 가면 테스트가 복잡해지고")," echo에 ",l.createElement(n.strong,null,"강하게 종속됨")),"\n"),"\n",l.createElement(n.blockquote,null,"\n",l.createElement(n.p,null,l.createElement(n.code,null,"context.Context"),"란?"),"\n"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"Go 표준 라이브러리에 포함된 컨텍스트 타입"),"\n",l.createElement(n.li,null,"요청 간 ",l.createElement(n.strong,null,"데이터 전달"),", ",l.createElement(n.strong,null,"취소 신호 전파"),", ",l.createElement(n.strong,null,"타임아웃 처리")," 등을 위해 사용"),"\n",l.createElement(n.li,null,"트레이싱 ID 같은 메타데이터를 함께 넣어 시스템 디버깅에 유용"),"\n"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-go"},'func SearchMemberData(ctx context.Context) error {\n    logrus.WithContext(ctx).Trace("")\n}\n')),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,l.createElement(n.strong,null,"표준 라이브러리"),"에서 제공 (net/http 등 포함 대부분의 Go 코드에서 사용)"),"\n",l.createElement(n.li,null,"인터페이스가 간단해서 ",l.createElement(n.strong,null,"테스트가 쉽고"),", ",l.createElement(n.strong,null,"의존성이 적음")),"\n",l.createElement(n.li,null,"주로 서비스 계층과 레포지토리 계층에서 사용"),"\n"),"\n",l.createElement(n.h1,null,"결론"),"\n",l.createElement(n.blockquote,null,"\n",l.createElement(n.p,null,l.createElement(n.strong,null,"echo.Context")," 핸들러 레벨에서만 사용하고 서비스 계층에서는 ",l.createElement(n.strong,null,"context.Context"),"를 사용\n핸들러는 웹 프레임워크의 영역 /서비스는 로직의 영역으로 둘을 적절히 분리하면 코드의 테스트성, 유지보수성, 재사용성이 훨씬 좋아진다.\necho.Context를 넘기면 서비스가 echo에 종속되어 테스트가 복잡해질 수 있다!"),"\n"))}var o=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,c.RP)(),e.components);return n?l.createElement(n,e,l.createElement(r,e)):r(e)},u=t(7292);function a(e){return l.createElement(u.A,e,l.createElement(o,e))}u.A}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-golang-2025-04-16-go-context-mdx-3efa81e335e7b737ad9a.js.map