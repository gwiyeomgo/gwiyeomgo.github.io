{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-infra-2023-08-29-infra-kubernetes-mdx-4fd1f1d0cd227b7fa6ce.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/server/infra/2023-08-29-infra-kubernetes.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    blockquote: \"blockquote\",\n    h1: \"h1\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"기본 개념\"), \"\\n\", React.createElement(_components.h3, null, \"파드(Pod)\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"배포할 수 있는 가장 작은 단위\"), \"\\n\", React.createElement(_components.li, null, \"컨테이너 = 프로세스\"), \"\\n\", React.createElement(_components.li, null, \"파드 = 논리적 호스트\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"노드(Node)\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"물리적 호스트 (여러 개의 파드를 실행 가능)\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"파드 셋 관리\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"컨트롤러\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"카인드(Kind)\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"도커 컨테이너를 노드로 사용하여 로컬 쿠버네티스 클러스터를 실행\"), \"\\n\", React.createElement(_components.li, null, \"카인드 사용하려면 도커 설치 필요\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"설치 및 기본 명령어\"), \"\\n\", React.createElement(_components.h3, null, \"kubectl 설치\"), \"\\n\", React.createElement(_components.p, null, \"쿠버네티스 클러스터에 명령을 보내는 CLI 도구\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"brew install kubectl\\r\\nkubectl version\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/\\r\\nhttps://yuls-with-ai.tistory.com/419\\n\")), \"\\n\", React.createElement(_components.h3, null, \"golang 으로  kind(kubernetes in Docker) 설치\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"go install sigs.k8s.io/kind@latest\")), \"\\n\", React.createElement(_components.h2, null, \"로컬에서 Kind 클러스터 생성 및 관리\"), \"\\n\", React.createElement(_components.p, null, \"도커 이미지를 빌드하고\\r\\nKind 클러스터에 로드한 다음\\r\\nHelm을 사용하여 파드를 배포하고\\r\\n로컬에서 실행할 수 있는 상태가 됩니다\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Kind 클러스터 생성 정보 확인\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Kind를 사용하여 로컬에서 Kubernetes 클러스터를 생성\\r\\n\", React.createElement(_components.code, null, \"kind create cluster\"), \"\\r\\nKubernetes 클러스터 정보 확인허는 명령어로 Kind 클러스터의 정보를 확인합니다.\\r\\n\", React.createElement(_components.code, null, \"kubectl cluster-info\"), \"\\r\\n현재 로컬 머신의 Docker 엔진에서 실행 중인 컨테이너 목록이 표시\\r\\n\", React.createElement(_components.code, null, \"docker ps\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"도커 어플리케이션을 실행\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"도커 이미지 빌드(현재 디렉토리에서 Docker 이미지를 빌드)\\r\\n\", React.createElement(_components.code, null, \"docker build -t github.com/test/proglog:0.0.1\")), \"\\n\", React.createElement(_components.p, null, \"Kind 클러스터에 이미지 로드\\r\\n이전에 빌드한 Docker 이미지를 Kind 클러스터에 로드\\r\\n클러스터 내에서 이 이미지를 사용할 수 있음\\r\\n\", React.createElement(_components.code, null, \"kind load docker-image github.com/test/proglog:0.0.1\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Helm을 사용한 파드 배포\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Helm 차트를 템플릿으로 변환\\r\\n\", React.createElement(_components.code, null, \"helm template proglog deploy/proglog\")), \"\\n\", React.createElement(_components.p, null, \"Helm 차트를 사용하여 Kubernetes 클러스터에 프로그램을 배포\\r\\n\", React.createElement(_components.code, null, \"helm install proglog deploy/proglog\")), \"\\n\", React.createElement(_components.p, null, \"배포한 파드의 상태를 확인\\r\\n\", React.createElement(_components.code, null, \"kubectl get pods\")), \"\\n\", React.createElement(_components.p, null, \"Kubernetes 파드에 로컬 포트 포워딩을 설정\\r\\n이를 통해 로컬 머신에서 해당 파드의 포트로 접속할 수 있게 됩니다.\\r\\n\", React.createElement(_components.code, null, \"kubectl port-forward pod/proglog-0 8400\")), \"\\n\", React.createElement(_components.h1, null, \"실습: 개발 서버에서 Redis 데이터 조회\"), \"\\n\", React.createElement(_components.h3, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"쿠버네티스를 사용해 개발 서버를 운영중이다. (20240517)\\r\\n개발 과정에서 redis 에 접속해 데이터를 조회해애 했다\\r\\n실제 수거 간사님들이 로그인해서 업무를 조회할때 redis 의 값이 저장되기 떄문에\\r\\n모두 잘 들어오셔서 업무에 차질이 없도록 확인해야 했다\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"개발서버 접속\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"ssh user @oo.oo.oo.oo\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"쿠버네티스에 실행 중인 pod 목록을 조회\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"kubectl --context={context_name} -n {context_name} get pods\"), \"\\r\\n로 조회시 목록이 나오며 NAME 으로 단건 조회 접속 가능하다\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"특정 파드 조회\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"단건: kubectl --context={context_name} -n {context_name} get pods | grep {pod-name}\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"파드 내에서 Redis-CLI 접속\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"kubectl --context={context_name} -n {context_name} exec -it {pod-name} redis-cli\"), \"\\r\\n(참고)Bash 쉘을 통해 접속\\r\\n\", React.createElement(_components.code, null, \"kubectl --context={context_name} -n {context_name} exec -it {pod-name}  -- /bin/bash\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Redis-CLI에서 인증 문제 해결\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, \"(error) NOAUTH Authentication required. 발생 시\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"auth {비밀번호}\"), \" 입력해 해결\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"(참고) Redis 키값 조회\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"운영배포 후 모두 로그인하셔서 redis 에서 정보를 저장하고 있는지 확인\\r\\n\", React.createElement(_components.code, null, \"keys *test*\"), \" 로  키값에 test 가 있는 모든 키를 조회\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://freeblogger.tistory.com/10\"\n  }, \"https://freeblogger.tistory.com/10\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/Users/gwiyeom/Documents/etc/gwiyeomgo.github.io/content/posts/server/infra/2023-08-29-infra-kubernetes.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","h3","ul","li","p","pre","code","blockquote","h1","a","_provideComponents","components","React","href","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}