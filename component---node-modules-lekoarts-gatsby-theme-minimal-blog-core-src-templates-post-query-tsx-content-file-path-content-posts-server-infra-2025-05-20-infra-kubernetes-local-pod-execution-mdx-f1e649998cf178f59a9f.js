"use strict";(self.webpackChunkgwiyeom_blog=self.webpackChunkgwiyeom_blog||[]).push([[7314],{2143:function(e,l,n){n.r(l),n.d(l,{Head:function(){return m.p},default:function(){return u}});var t=n(6540),a=n(8453);function r(e){const l=Object.assign({h1:"h1",p:"p",ol:"ol",li:"li",pre:"pre",code:"code",ul:"ul",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h3:"h3"},(0,a.RP)(),e.components);return t.createElement(t.Fragment,null,t.createElement(l.h1,null,"배경"),"\n",t.createElement(l.p,null,"staging 은 쿠버네티스 환경이다\n젠킨스 파이프라인을 활용해서 docker 이미지를 빌드 push 하고 staging 에\n앱을 배포하려고 한다"),"\n",t.createElement(l.p,null,"ECR 까지 이미지를 빌드 했고\n로컬에서 AWS ECR 이미지를 받아와 쿠버네틱스 파드를 실행하려고 한다"),"\n",t.createElement(l.h1,null,"로컬에서 설치할것"),"\n",t.createElement(l.ol,null,"\n",t.createElement(l.li,null,"kubectl -> brew install kubectl ,kubectl version 확인"),"\n",t.createElement(l.li,null,"kind  -> brew install kind , kind version"),"\n",t.createElement(l.li,null,"docker"),"\n",t.createElement(l.li,null,"helm ->  brew install helm"),"\n"),"\n",t.createElement(l.h1,null,"ECR 이미지 다운받고 pod 실행 - 앱을 로컬에서 실행"),"\n",t.createElement(l.ol,null,"\n",t.createElement(l.li,null,"AWS ECR에 로그인하여 Docker 이미지 Pull/Push를 허용하는 인증 명령어"),"\n"),"\n",t.createElement(l.pre,null,t.createElement(l.code,null,"aws ecr get-login-password --region ap-northeast-2 | \\\ndocker login --username AWS --password-stdin 123456789012.dkr.ecr.ap-northeast-2.amazonaws.com\n")),"\n",t.createElement(l.ol,{start:"2"},"\n",t.createElement(l.li,null,"Docker에서 ECR 이미지 pull"),"\n"),"\n",t.createElement(l.pre,null,t.createElement(l.code,null,"docker pull 123456789012.dkr.ecr.ap-northeast-2.amazonaws.com/test-sharing-service:latest\n")),"\n",t.createElement(l.p,null,t.createElement(l.code,null,"docker images")," 로 다운받은 이미지 확인"),"\n",t.createElement(l.ul,null,"\n",t.createElement(l.li,null,"\n",t.createElement(l.p,null,"tip Docker Scout란?\nDocker Scout는 pulled된 이미지에 대해 다음을 자동으로 수행\n취약점 스캔 (CVEs) 보안 업데이트 제안 이미지 분석 결과를 Docker Desktop에서 확인 가능"),"\n"),"\n",t.createElement(l.li,null,"\n",t.createElement(l.p,null,"tip AWS ECR 에서 실제 이미지 이름 조회해서 tag 등 확인 가능"),"\n"),"\n"),"\n",t.createElement(l.pre,null,t.createElement(l.code,null,"aws ecr describe-images \\\n  --repository-name test-sharing-service \\\n  --region ap-northeast-2\n")),"\n",t.createElement(l.pre,null,t.createElement(l.code,null,'"imageTags": [\n"latest"\n]\n')),"\n",t.createElement(l.ol,{start:"3"},"\n",t.createElement(l.li,null,"로컬에 클러스터 생성\nkind 활용: Kubernetes 실습/테스트 환경에서 로컬에서 클러스터를 만들 수 있게 해주는 도구\n쿠버네티스를 로컬에서 빠르게 실습하고 테스트하고 싶을때 활용"),"\n"),"\n",t.createElement(l.table,null,t.createElement(l.thead,null,t.createElement(l.tr,null,t.createElement(l.th,null,"목적"),t.createElement(l.th,null,"명령어"))),t.createElement(l.tbody,null,t.createElement(l.tr,null,t.createElement(l.td,null,"클러스터 목록 보기"),t.createElement(l.td,null,t.createElement(l.code,null,"kind get clusters"))),t.createElement(l.tr,null,t.createElement(l.td,null,"PC에 K8s 클러스터 구성"),t.createElement(l.td,null,t.createElement(l.code,null,"kind create cluster --name test"))),t.createElement(l.tr,null,t.createElement(l.td,null,"현재 kubectl 컨텍스트 보기"),t.createElement(l.td,null,t.createElement(l.code,null,"kubectl config get-contexts"))),t.createElement(l.tr,null,t.createElement(l.td,null,"클러스터 전체 리소스 보기"),t.createElement(l.td,null,t.createElement(l.code,null,"kubectl get all -A"))),t.createElement(l.tr,null,t.createElement(l.td,null,"노드 보기"),t.createElement(l.td,null,t.createElement(l.code,null,"kubectl get nodes"))),t.createElement(l.tr,null,t.createElement(l.td,null,"클러스터 정보 보기"),t.createElement(l.td,null,t.createElement(l.code,null,"kubectl cluster-info"))))),"\n",t.createElement(l.p,null,"kind는 내부적으로 Docker 컨테이너를 사용해서\n",t.createElement(l.code,null,"docker ps")," 실행시 kind-control-plane 이라는 이름의 컨테이너가 실행 중인 걸 확인할 수 있다"),"\n",t.createElement(l.table,null,t.createElement(l.thead,null,t.createElement(l.tr,null,t.createElement(l.th,null,"CONTAINER ID"),t.createElement(l.th,null,"IMAGE"),t.createElement(l.th,null,"PORTS"),t.createElement(l.th,null,"NAMES"))),t.createElement(l.tbody,null,t.createElement(l.tr,null,t.createElement(l.td,null,"11111"),t.createElement(l.td,null,"kindest/node:v1.33.1"),t.createElement(l.td,null,"127.0.0.1:64964->6443/tcp"),t.createElement(l.td,null,"kind-control-plane")))),"\n",t.createElement(l.ol,{start:"4"},"\n",t.createElement(l.li,null,"kind 클러스터에 이미지 import"),"\n"),"\n",t.createElement(l.pre,null,t.createElement(l.code,null,"kind load docker-image 123456789012.dkr.ecr.ap-northeast-2.amazonaws.com/test-sharing-service:latest --name test\n")),"\n",t.createElement(l.ol,{start:"5"},"\n",t.createElement(l.li,null,"직접 Pod 만들어보자\n",t.createElement(l.code,null,"nano my-pod.yaml")),"\n"),"\n",t.createElement(l.pre,null,t.createElement(l.code,null,"apiVersion: v1\nkind: Pod\nmetadata:\n  name: test-service-pod\nspec:\n  containers:\n    - name: test-service\n      image: 760511520547.dkr.ecr.ap-northeast-2.amazonaws.com/staging-gift-sharing-service:R-250520_175451\n      ports:\n        - containerPort: 9010\n")),"\n",t.createElement(l.p,null,t.createElement(l.code,null,"kubectl apply -f my-pod.yaml")," 적용시 pod/test-service-pod 생성\n",t.createElement(l.code,null,"kubectl get pods ")," 로 실행 확인"),"\n",t.createElement(l.h1,null,"로컬에서 실행한 앱과 mysql 연동"),"\n",t.createElement(l.p,null,"로컬에 pods 추가햤지만 실행되고 꺼지고 있다\nCrashLoopBackOff은 정상적인 앱 종료가 아닌 경우로\n",t.createElement(l.code,null,"kubectl logs test-service-pod")," 로 로그를 봤더니\nDB 연결 실패다"),"\n",t.createElement(l.h3,null,"문제"),"\n",t.createElement(l.p,null,"로컬 PC에 있는 MySQL DB에 접근하는 것이 아니다\n쿠버네티스 클러스터 안에 새로운 MySQL을 생성해서 그 DB에 접근 해야한다"),"\n",t.createElement(l.h3,null,"해결"),"\n",t.createElement(l.p,null,"Helm을 이용해 클러스터 안에 MySQL을 띄우고\nNestJS 앱에서 이 MySQL에 연결"),"\n",t.createElement(l.ol,null,"\n",t.createElement(l.li,null,"Bitnami MySQL 차트 추가"),"\n"),"\n",t.createElement(l.p,null,"Bitnami라는 Helm Chart 저장소를 내 로컬 Helm에 등록하고 최신 목록으로 갱신\nHelm을 처음 설치하면 기본 저장소가 아무것도 없기때문에\n외부 저장소를 내 Helm에 등록하는 작업을함"),"\n",t.createElement(l.pre,null,t.createElement(l.code,null,"helm repo add bitnami https://charts.bitnami.com/bitnami # bitnami 라는 Helm 저장소를 내 로컬 Helm에 등록\nhelm repo update      # 최신 Chart 목록 반영\n")),"\n",t.createElement(l.p,null,"방금 등록한 저장소(bitnami)에서 mysql Chart를 받아와서\n내 클러스터에 MySQL을 설치"),"\n",t.createElement(l.p,null,t.createElement(l.code,null,"nano mysql-values.yaml")),"\n",t.createElement(l.pre,null,t.createElement(l.code,null,'auth:\n  rootPassword: "1234"\n  username: "user"\n  password: "1234"\n  database: "test"\n')),"\n",t.createElement(l.p,null,t.createElement(l.code,null,"helm install my-mysql bitnami/mysql -f mysql-values.yaml"),"\n수정 후\n",t.createElement(l.code,null,"helm upgrade my-mysql bitnami/mysql -f mysql-values.yaml")),"\n",t.createElement(l.ul,null,"\n",t.createElement(l.li,null,"삭제하고 싶다면 + 데이터(pvc) 자동 삭제되지 않아서 수동 삭제\n",t.createElement(l.code,null," helm uninstall my-mysql"),"\n",t.createElement(l.code,null,"kubectl delete pvc -l app.kubernetes.io/instance=my-mysql")),"\n"),"\n",t.createElement(l.h3,null,"my-pod.yaml DB환경 변수 추가"),"\n",t.createElement(l.p,null,t.createElement(l.code,null,"nano my-pod.yaml ")),"\n",t.createElement(l.pre,null,t.createElement(l.code,null,'...\nports:\n    - containerPort: 9010\nenv:\n        - name: DB_HOST\n          value: my-mysql.default.svc.cluster.local\n        - name: DB_PORT\n          value: "3306"\n        - name: DB_USER\n          value: "user"\n        - name: DB_PASSWORD\n          value: "1234"\n        - name: DB_NAME\n          value: test\n')),"\n",t.createElement(l.p,null,"변경된 내용 저장하고 같은 이름 파드 지우고 다시 적용시키기\n",t.createElement(l.code,null,"kubectl delete pod gift-service-pod"),"\n",t.createElement(l.code,null,"kubectl apply -f my-pod.yaml")))}var c=function(e){void 0===e&&(e={});const{wrapper:l}=Object.assign({},(0,a.RP)(),e.components);return l?t.createElement(l,e,t.createElement(r,e)):r(e)},m=n(7292);function u(e){return t.createElement(m.A,e,t.createElement(c,e))}m.A}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-infra-2025-05-20-infra-kubernetes-local-pod-execution-mdx-f1e649998cf178f59a9f.js.map