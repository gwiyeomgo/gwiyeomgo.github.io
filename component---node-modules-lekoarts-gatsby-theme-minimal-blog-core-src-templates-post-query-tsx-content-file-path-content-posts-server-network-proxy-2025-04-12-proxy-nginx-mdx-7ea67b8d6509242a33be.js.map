{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-network-proxy-2025-04-12-proxy-nginx-mdx-7ea67b8d6509242a33be.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/server/network/proxy/2025-04-12-proxy-nginx.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    ol: \"ol\",\n    li: \"li\",\n    blockquote: \"blockquote\",\n    ul: \"ul\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"route53에 도메인을 등록했다\\n1.호스팅 영역> 기존 gwiyoem.org 도메인선택\\n2.레코드 생성\\n\", React.createElement(_components.code, null, \"새 서브도메인 (예: test-service.gwiyeom.org) → EC2 퍼블릭 IP로 연결\")), \"\\n\", React.createElement(_components.p, null, \"이후 postman 으로 호출했지만 404 에러가 발생했다\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"<html>\\n<head><title>404 Not Found</title></head>\\n<body>\\n<center><h1>404 Not Found</h1></center>\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\n</body>\\n</html>\\n\\n\")), \"\\n\", React.createElement(_components.p, null, \"EC2에서 Nginx 실행 중 인데\\nEC2 안의 Nginx가 새 도메인을 처리하지 못해서 발생했다\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"\\nPostman or 브라우저\\n        ↓\\nRoute53 (도메인 네임서버)\\n    ↓\\n도메인이 연결된 IP (예: EC2 퍼블릭 IP)\\n    ↓\\nEC2 인스턴스 내 Nginx\\n    ↓\\nNginx가 백엔드 앱 (예: Golang, Node 등)으로 요청 전달\\n\\n\")), \"\\n\", React.createElement(_components.h1, null, \"Nginx가 뭐고 왜 도메인을 지정해야하지?\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Nginx = 웹 서버이자 리버스 프록시 서버 = 안내 데스크\\n요청을 받아서 적절한 서버(앱)로 전달해주는 배달원\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"https://test-service.gwiy eom.org\"), \" 요청-> 서버(EC2) 도착하면 Nginx 가 \\\"이 요청은 NestJS 서버로 보내야겠군~\\\" 하면서\\nlocalhost:3000 로 전달 = 리버스 프록시\"), \"\\n\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"2\"\n  }, \"\\n\", React.createElement(_components.li, null, \"서버(EC2)에 도착했을 때 Nginx가 어떻게 처리할지 알려주기 위해!\\n어떤 요청을 어떤 앱에 연결해줘야 하는지 알기 위해 서브 도메인 등록 필요\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, \"Nginx에 서브도메인 등록하는 방법\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Nginx 설정 파일에 문법 오류가 있는지 검사하는 명령어\\n\", React.createElement(_components.code, null, \"sudo nginx -t\")), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\\nnginx: configuration file /etc/nginx/nginx.conf test is successful\\n\")), \"\\n\", React.createElement(_components.ol, {\n    start: \"2\"\n  }, \"\\n\", React.createElement(_components.li, null, \"파일열기\\n\", React.createElement(_components.code, null, \"sudo nano /etc/nginx/nginx.conf\"), \"\\n파일이 없는 상황 ㅠ\"), \"\\n\", React.createElement(_components.li, null, \"default만 사용중으로 확인됨!\\n\", React.createElement(_components.code, null, \"ls /etc/nginx/sites-available\")), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"default  default.bak\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"default 파일 열기\\n\", React.createElement(_components.code, null, \"sudo nano /etc/nginx/sites-available/default\")), \"\\n\", React.createElement(_components.ol, {\n    start: \"4\"\n  }, \"\\n\", React.createElement(_components.li, null, \"편집\\nNginx 서버 설정에 test-service.gwiyeom.org라는 서브도메인을 추가\\nCertbot으로 HTTPS 인증서를 설정 을 위한 값 추가\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"# 서브도메인을 추가\\nserver {\\n    server_name test-service.gwiyeom.org;\\n    location / {\\n        proxy_pass http://127.0.0.1:4000;\\n        proxy_set_header Host $http_host;\\n        proxy_set_header X-Forwarded-Host $http_host;\\n        proxy_set_header X-Real-IP $remote_addr;\\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\n        proxy_set_header X-Forwarded-Proto $scheme;\\n    }\\n}\\n\\n#\\nserver {\\n    if ($host = test-service.gwiyeom.org) {\\n        return 301 https://$host$request_uri;\\n    } # managed by Certbot\\n\\n  server_name test-service.gwiyeom.org;\\n    listen 80;\\n    return 404; # managed by Certbot\\n}\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Let's Encrypt(Certbot)를 이용해 HTTPS 인증서를 발급받고,HTTP 요청은 HTTPS로 리디렉션 처리하는 것.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Ctrl + O → 저장\\nEnter → 파일 이름 확인하고 저장\\nCtrl + X → 종료\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"5\"\n  }, \"\\n\", React.createElement(_components.li, null, \"nginx에 적용\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Nginx 설정 파일에 문법 오류가 있는지 검사하는 명령어 \", React.createElement(_components.code, null, \"sudo nginx -t\")), \"\\n\", React.createElement(_components.li, null, \"Nginx가 설정 파일을 다시 읽고 적용하도록 \\\"리로드\\\"시키는 명령어 \", React.createElement(_components.code, null, \"sudo systemctl reload nginx\"), \"\\n\\\"nginx야, 새로 바뀐 설정 파일 좀 반영해서 다시 작동해줘~~~\\\"\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, \"HTTPS 인증서를 Certbot으로 추가 방법\"), \"\\n\", React.createElement(_components.p, null, \"Nginx 서버 설정에 새로 추가된 서버 도메인 내용에 다음 명령어 실행시 Certbot이 자동으로 채워준다\\n= HTTPS(SSL) 적용하고 싶다면 이 도메인에 대해 실제 SSL 인증서를 새로 발급\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"SSL 인증서를 새로 발급\\n\", React.createElement(_components.code, null, \"sudo certbot --nginx -d test-service.gwiyeom.org\"), \"\\n-> Congratulations! You have successfully enabled HTTPS on\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"TIP) 이름 문제 발생?\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"도메인 이름 규칙 (중요)\\n도메인 이름은 RFC 표준에 따라 다음 규칙을 따라야 한다:\\n✅ 허용: 영문 소문자 (a-z), 숫자 (0-9), 하이픈 (-)\\n❌ 금지: 언더스코어(_), 공백, 특수문자\\n\\ntest_service.gwiyeom.org ← ❌ 잘못된 도메인 이름\\n\")), \"\\n\", React.createElement(_components.h1, null, \"(질문)docker 사용시 nginx가 꼭 필요한 건가?\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"Docker로 단순 개발, 테스트 중\\t-> ❌ 필요 없음 (브라우저가 직접 포트로 접근)\\n여러 서비스를 운영하거나 도메인 연결할 때 ->  ✅ Nginx 필요!\\nHTTPS(SSL) 인증서를 사용하고 싶을 때 -> \\t✅ Certbot + Nginx 필요\\nReact/Next 같은 프론트도 함께 서빙할 때 -> ✅ Nginx에서 정적 파일 서빙 좋음\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/server/network/proxy/2025-04-12-proxy-nginx.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","code","pre","ol","li","blockquote","ul","h3","_provideComponents","components","React","start","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}