{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-database-mysql-2025-04-03-mysql-optimized-task-api-mdx-cc0e2305055436b1ff1a.js","mappings":"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","sources":["webpack://gwiyeom-blog/./content/posts/server/database/mysql/2025-04-03-mysql-optimized-taskAPI.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    ol: \"ol\",\n    li: \"li\",\n    blockquote: \"blockquote\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    ul: \"ul\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"5초 이상 속도 지연되면 알림이 온다\\n자주 오는 알림중 업무 목록 API 속도를 개선하려고 한다\"), \"\\n\", React.createElement(_components.p, null, \"아래 쿼리는 직원의 업무 목록을 조회하는 API 에서 속도를 지연시키는 쿼리였다\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"SELECT * FROM A\\nINNER JOIN B ON A.donation_id = B.id\\nLEFT JOIN C ON B.id = C.donation_id and C.deleted_at is null\\n WHERE (A.deleted_at is null) AND (B.deleted_at is null)\\n AND (A.status='Register')\\n AND ((A.out_id IN (\\\"31231.2323\\\",\\\"12412.4124\\\" ..... ) OR member_id = 655)\\n AND (A.date < '20250418')\\n AND (A.deleted_at IS NULL OR A.deleted_at='0001-01-01 00:00:00');\\n\\n\")), \"\\n\", React.createElement(_components.h1, null, \"분석\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"로그를 통해 쿼리를 확인하니\\nWHERE 절 out_id  IN 조건 값이 너무 많았다 (인덱스 타지 않음)\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"EXPLAIN 실행하니 인덱스는 2개 있지만\\ncollects 테이블에서 type ALL 으로 전체 스캔 하고 있으며 rows 92563건으로 많다\\nUsing where 로 WHERE 조건으로 필터링중\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, \"개선 작업\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"donation_collects 테이블의 WHERE 조건들이 인덱스를 타도록 설계\", \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"out_id 인덱스 추가 -> 변화 X\"), \"\\n\", React.createElement(_components.li, null, \"여러 조건으로 복합인덱스를 추가해서 개발환경에서 확인했지만 효과 없고 사용 안함\\n복합 인덱스(member_id, date, deleted_at)는 추가됐지만 사용되지 않음\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, \"왜 인덱스를 안타지?\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"MySQL 옵티마이저는 성능이 인덱스보다 풀 스캔이 빠르다고 판단하면 인덱스를 안탄다?\\nIN (1,2,3,...,10000) 식으로 값이 매우 많을 경우, 인덱스를 포기\"), \"\\n\", React.createElement(_components.li, null, \"OR 조건 또는 복잡한 조건 조합\\n\", React.createElement(_components.code, null, \"AND ((A.out_id IN (\\\"31231.2323\\\",\\\"12412.4124\\\" ..... ) OR member_id = 655)\"), \"\\nOR을 사용\\n(A AND B) OR (C AND D) 처럼 조건 분기가 생기면 인덱스를 못 타는 경우가 생김\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, \"작업 내용\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"OR → UNION ALL 방식으로 쿼리 분해 +  기존 기능 동작하는지 테스트\"), \"\\n\", React.createElement(_components.li, null, \"IN 리스트 대신 가상 테이블 조인 고려 (WITH)  +  기존 기능 동작하는지 테스트\"), \"\\n\", React.createElement(_components.li, null, \"복합 인덱스를 조건 순서대로 만들고\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, \"개선 전 후 결과 기록\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"1번 결과\\n|쿼리 | select_type | table | type | key | rows | Extra|\\n|---|---|---|\\t---|\\t---|---|\\t---|\\n|기존  | SIMPLE | A | ALL | 여러 인덱스 중 하나 (복합 포함) | 897 | Using where |\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"-> type ALL, 테스트 환경 데이터인데도 row 897\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"항목\"), React.createElement(_components.th, null, \"기존 쿼리\"), React.createElement(_components.th, null, \"개선 쿼리 (UNION)\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, \"type\"), React.createElement(_components.td, null, \"ALL\"), React.createElement(_components.td, null, \"ALL\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"rows\"), React.createElement(_components.td, null, \"약 897\"), React.createElement(_components.td, null, \"약 897 * 2\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"개선 여부\"), React.createElement(_components.td, null, \"효과 없음 (풀 스캔 유지)\"), React.createElement(_components.td, null, \"인덱스 전략 변화 없음, row 수만 증가함\")))), \"\\n\", React.createElement(_components.p, null, \"-> UNION으로 바꾸는 것만으로는 성능 향상이 없고 오히려 row 수가 2배...더 안좋아 진것 같음\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"2번 결과\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"WITH out_ids(id) AS (\\n  SELECT \\\"31231.2323\\\" UNION ALL\\n  SELECT \\\"31231.2223\\\" UNION ALL\\n  ...\\n)\\nSELECT ...\\nFROM out_id dc\\nINNER JOIN out_ids gi ON dc.out_id = gi.id\\n\")), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"table\"), React.createElement(_components.th, null, \"type\"), React.createElement(_components.th, null, \"key\"), React.createElement(_components.th, null, \"rows\"), React.createElement(_components.th, null, \"Extra\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, \"CTE\"), React.createElement(_components.td, null, \"ALL\"), React.createElement(_components.td, null, \"NULL\"), React.createElement(_components.td, null, \"330\"), React.createElement(_components.td, null, \"CTE는 가볍고 작은 테이블처럼 처리됨\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"A\"), React.createElement(_components.td, null, \"ref\"), React.createElement(_components.td, null, \"idx_A_out_id\"), React.createElement(_components.td, null, \"402\"), React.createElement(_components.td, null, \"Using index condition; Using where\")))), \"\\n\", React.createElement(_components.h1, null, \"INDEX 확인 방법\"), \"\\n\", React.createElement(_components.p, null, \"*\", React.createElement(_components.code, null, \"SHOW INDEX FROM A\"), \" 인덱스 사용\"), \"\\n\", React.createElement(_components.h1, null, \"결론\"), \"\\n\", React.createElement(_components.p, null, \"단순한 인덱스 추가만으로는 해결이 어려운 케이스로\\nWITH + JOIN 방식이 효과적으로 인덱스 활용을 유도함\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"기존의 330 rows만 읽음\"), \"\\n\", React.createElement(_components.li, null, \"EXPLAIN type ALL -> Ref\"), \"\\n\", React.createElement(_components.li, null, \"실행 계획: Using index condition; Using where 확인\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/server/database/mysql/2025-04-03-mysql-optimized-taskAPI.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","pre","code","ol","li","blockquote","table","thead","tr","th","tbody","td","ul","_provideComponents","components","React","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}