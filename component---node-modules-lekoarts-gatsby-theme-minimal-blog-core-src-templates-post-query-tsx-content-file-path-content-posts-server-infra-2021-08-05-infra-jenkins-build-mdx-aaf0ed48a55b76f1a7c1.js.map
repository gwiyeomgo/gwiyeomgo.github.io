{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-server-infra-2021-08-05-infra-jenkins-build-mdx-aaf0ed48a55b76f1a7c1.js","mappings":"mNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,KAAM,OACNC,IAAK,MACLC,WAAY,aACZC,EAAG,IACHC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,MAAO,QACPC,MAAO,QACPC,GAAI,KACJC,GAAI,KACJC,MAAO,QACPC,GAAI,KACJC,OAAQ,WACPC,EAAAA,EAAAA,MAAsBpB,EAAMqB,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBrB,EAAYG,GAAI,KAAM,MAAO,KAAMkB,EAAAA,cAAoBrB,EAAYI,EAAG,KAAM,8FAA+FiB,EAAAA,cAAoBrB,EAAYK,KAAM,KAAM,+DAAgE,KAAMgB,EAAAA,cAAoBrB,EAAYM,IAAK,KAAMe,EAAAA,cAAoBrB,EAAYK,KAAM,CACjbiB,UAAW,oBACXC,OAAO,EACPC,QAAQ,EACRC,GAAG,EACHC,MAAM,EACNC,KAAK,EACLC,UAAU,EACVC,IAAI,EACJC,OAAO,EACPC,QAAQ,EACRC,KAAK,EACLC,YAAY,EACZC,KAAK,EACLC,QAAQ,EACRC,eAAe,EACfC,SAAS,EACTC,MAAM,EACNC,KAAK,GACJ,kOAAmO,KAAMlB,EAAAA,cAAoBrB,EAAYI,EAAG,KAAMiB,EAAAA,cAAoBrB,EAAYK,KAAM,KAAM,sDAAuD,KAAMgB,EAAAA,cAAoBrB,EAAYM,IAAK,KAAMe,EAAAA,cAAoBrB,EAAYK,KAAM,CAC7ciB,UAAW,oBACXC,OAAO,EACPC,QAAQ,EACRC,GAAG,EACHC,MAAM,EACNC,KAAK,EACLC,UAAU,EACVC,IAAI,EACJC,OAAO,EACPC,QAAQ,EACRC,KAAK,EACLC,YAAY,EACZC,KAAK,EACLC,QAAQ,EACRC,eAAe,EACfC,SAAS,EACTC,MAAM,EACNC,KAAK,GACJ,kOAAmO,KAAMlB,EAAAA,cAAoBrB,EAAYI,EAAG,KAAM,mDAAoD,KAAMiB,EAAAA,cAAoBrB,EAAYI,EAAG,KAAM,yDAA0D,KAAMiB,EAAAA,cAAoBrB,EAAYG,GAAI,KAAM,OAAQ,KAAMkB,EAAAA,cAAoBrB,EAAYO,WAAY,KAAM,KAAMc,EAAAA,cAAoBrB,EAAYI,EAAG,KAAM,gFAAiF,MAAO,KAAMiB,EAAAA,cAAoBrB,EAAYI,EAAG,KAAMiB,EAAAA,cAAoBrB,EAAYK,KAAM,KAAM,mEAAoE,KAAMgB,EAAAA,cAAoBrB,EAAYI,EAAG,KAAM,4CAA6C,KAAMiB,EAAAA,cAAoBrB,EAAYI,EAAG,KAAMiB,EAAAA,cAAoBrB,EAAYQ,EAAG,CACp/BgC,KAAM,mCACL,oCAAqC,KAAMnB,EAAAA,cAAoBrB,EAAYG,GAAI,KAAM,YAAa,KAAMkB,EAAAA,cAAoBrB,EAAYG,GAAI,KAAM,MAAO,KAAMkB,EAAAA,cAAoBrB,EAAYI,EAAG,KAAM,0BAA2B,KAAMiB,EAAAA,cAAoBrB,EAAYI,EAAG,KAAM,oBAAqB,KAAMiB,EAAAA,cAAoBrB,EAAYG,GAAI,KAAM,SAAU,KAAMkB,EAAAA,cAAoBrB,EAAYS,GAAI,KAAM,KAAMY,EAAAA,cAAoBrB,EAAYU,GAAI,KAAM,gbAAib,MAAO,KAAMW,EAAAA,cAAoBrB,EAAYI,EAAG,KAAM,uCAAwC,KAAMiB,EAAAA,cAAoBrB,EAAYI,EAAG,KAAM,uCAAwC,KAAMiB,EAAAA,cAAoBrB,EAAYI,EAAG,KAAM,mFAAoF,KAAMiB,EAAAA,cAAoBrB,EAAYS,GAAI,CACrtCgC,MAAO,KACN,KAAMpB,EAAAA,cAAoBrB,EAAYU,GAAI,KAAM,gUAAiU,MAAO,KAAMW,EAAAA,cAAoBrB,EAAYW,GAAI,KAAM,4BAA6B,KAAMU,EAAAA,cAAoBrB,EAAYY,MAAO,KAAMS,EAAAA,cAAoBrB,EAAYa,MAAO,KAAMQ,EAAAA,cAAoBrB,EAAYc,GAAI,KAAMO,EAAAA,cAAoBrB,EAAYe,GAAI,KAAM,MAAOM,EAAAA,cAAoBrB,EAAYe,GAAI,KAAM,OAAQM,EAAAA,cAAoBrB,EAAYe,GAAI,KAAM,0BAA2BM,EAAAA,cAAoBrB,EAAYgB,MAAO,KAAMK,EAAAA,cAAoBrB,EAAYc,GAAI,KAAMO,EAAAA,cAAoBrB,EAAYiB,GAAI,KAAMI,EAAAA,cAAoBrB,EAAYkB,OAAQ,KAAM,UAAWG,EAAAA,cAAoBrB,EAAYiB,GAAI,KAAM,0BAA2BI,EAAAA,cAAoBrB,EAAYK,KAAM,KAAM,kBAAmB,OAAQgB,EAAAA,cAAoBrB,EAAYiB,GAAI,KAAM,mCAAoCI,EAAAA,cAAoBrB,EAAYK,KAAM,KAAM,WAAY,gBAAiBgB,EAAAA,cAAoBrB,EAAYc,GAAI,KAAMO,EAAAA,cAAoBrB,EAAYiB,GAAI,KAAMI,EAAAA,cAAoBrB,EAAYkB,OAAQ,KAAM,UAAWG,EAAAA,cAAoBrB,EAAYiB,GAAI,KAAMI,EAAAA,cAAoBrB,EAAYK,KAAM,KAAM,YAAa,UAAWgB,EAAAA,cAAoBrB,EAAYiB,GAAI,KAAMI,EAAAA,cAAoBrB,EAAYK,KAAM,KAAM,aAAc,KAAMgB,EAAAA,cAAoBrB,EAAYK,KAAM,KAAM,UAAW,KAAMgB,EAAAA,cAAoBrB,EAAYK,KAAM,KAAM,oBAAqB,gBAAiBgB,EAAAA,cAAoBrB,EAAYc,GAAI,KAAMO,EAAAA,cAAoBrB,EAAYiB,GAAI,KAAMI,EAAAA,cAAoBrB,EAAYkB,OAAQ,KAAM,OAAQG,EAAAA,cAAoBrB,EAAYiB,GAAI,KAAM,iCAAkCI,EAAAA,cAAoBrB,EAAYiB,GAAI,KAAM,oDAAqDI,EAAAA,cAAoBrB,EAAYc,GAAI,KAAMO,EAAAA,cAAoBrB,EAAYiB,GAAI,KAAMI,EAAAA,cAAoBrB,EAAYkB,OAAQ,KAAM,OAAQG,EAAAA,cAAoBrB,EAAYiB,GAAI,KAAM,2BAA4BI,EAAAA,cAAoBrB,EAAYiB,GAAI,KAAM,iFAAkFI,EAAAA,cAAoBrB,EAAYc,GAAI,KAAMO,EAAAA,cAAoBrB,EAAYiB,GAAI,KAAMI,EAAAA,cAAoBrB,EAAYkB,OAAQ,KAAM,UAAWG,EAAAA,cAAoBrB,EAAYiB,GAAI,KAAM,mCAAoCI,EAAAA,cAAoBrB,EAAYiB,GAAI,KAAM,wCAAyCI,EAAAA,cAAoBrB,EAAYc,GAAI,KAAMO,EAAAA,cAAoBrB,EAAYiB,GAAI,KAAMI,EAAAA,cAAoBrB,EAAYkB,OAAQ,KAAM,UAAWG,EAAAA,cAAoBrB,EAAYiB,GAAI,KAAM,yBAA0BI,EAAAA,cAAoBrB,EAAYiB,GAAI,KAAM,8CACv3F,CAKA,MAJA,SAAoBlB,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAO2C,QAASC,GAAa1C,OAAOC,OAAO,CAAC,GAAGiB,EAAAA,EAAAA,MAAsBpB,EAAMqB,YAC3E,OAAOuB,EAAYtB,EAAAA,cAAoBsB,EAAW5C,EAAOsB,EAAAA,cAAoBvB,EAAmBC,IAAUD,EAAkBC,EAC9H,E,UCjEe,SAAS6C,EAAiB7C,GACvC,OAAOsB,EAAAA,cAAoBwB,EAAAA,EAAe9C,EAAOsB,EAAAA,cAAoByB,EAAqB/C,GAC5F,CAHA8C,EAAAA,C","sources":["webpack://gwiyeom-blog/./content/posts/server/infra/2021-08-05-infra-jenkins-build.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    blockquote: \"blockquote\",\n    a: \"a\",\n    ol: \"ol\",\n    li: \"li\",\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h3, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"코드를 main에 잘 머지시키고 젠킨스에서 배포버튼을 클릭했다.\\n그런데...\\n배포 실패했다.\\n그래서 consle 에 메세지를 확인했다.\\n에러는 2개이다.\\n\", React.createElement(_components.code, null, \"에러1 =>해결방법 찾아보니  https://satisfactoryplace.tistory.com/251\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-11:21:58\",\n    ERROR: true,\n    Couldn: true,\n    t: true,\n    find: true,\n    any: true,\n    revision: true,\n    to: true,\n    build: true,\n    Verify: true,\n    the: true,\n    repository: true,\n    and: true,\n    branch: true,\n    configuration: true,\n    htmlFor: true,\n    this: true,\n    job: true\n  }, \"11:21:58 Publish artifacts to S3 Bucket Build is still running\\n11:21:58 Publish artifacts to S3 Bucket Using S3 profile: S3 Deploy\\n11:21:58 Publish artifacts to S3 Bucket Skipping publishing on S3 because build failed\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"에러2 => 해결방법 찾아보니 https://huskdoll.tistory.com/484\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-11:21:58\",\n    ERROR: true,\n    Couldn: true,\n    t: true,\n    find: true,\n    any: true,\n    revision: true,\n    to: true,\n    build: true,\n    Verify: true,\n    the: true,\n    repository: true,\n    and: true,\n    branch: true,\n    configuration: true,\n    htmlFor: true,\n    this: true,\n    job: true\n  }, \"11:21:58 Publish artifacts to S3 Bucket Build is still running\\n11:21:58 Publish artifacts to S3 Bucket Using S3 profile: S3 Deploy\\n11:21:58 Publish artifacts to S3 Bucket Skipping publishing on S3 because build failed\\n\")), \"\\n\", React.createElement(_components.p, null, \"둘다 devops 를 담당하는 동료분께 요청드렸고\\n젠킨스 설정을 변경하셨다고 한다.\"), \"\\n\", React.createElement(_components.p, null, \"개발은 끝냈는데 배포 못하니까 답답하더라..\\n이참에 젠킨스에 관해서 공부하고 기록하려고 한다.\"), \"\\n\", React.createElement(_components.h3, null, \"젠킨스\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Software distribution is the process of delivering software to the end user.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"빌드(Build), 테스트, 그리고 배포(deployment) 도구 등 체인 전체를 통합할 수 있는 방법을 제공\")), \"\\n\", React.createElement(_components.p, null, \"cl?CI 지속적인 통합(Continuous Integration) 서버\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://jw910911.tistory.com/81\"\n  }, \"https://jw910911.tistory.com/81\")), \"\\n\", React.createElement(_components.h3, null, \"20220411\"), \"\\n\", React.createElement(_components.h3, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"개발자가 사용할 dev 서버에 배포한다.\"), \"\\n\", React.createElement(_components.p, null, \"사용자 페이지\\n어드민 페이지\"), \"\\n\", React.createElement(_components.h3, null, \"작업 목표\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"사용자 페이지\\n(프론트_프로젝트) 레포지토리에 dev 브랜치 따기\\njenkins와 dev 브랜치 연결\\njenkins에서 새로운 job 생성하기\\njob 이름 - (프론트_프로젝트)-dev\\njenkins 셋팅하기\\n(프론트_프로젝트)-test job 설정 참고\\ns3 버킷 만들기\\ncloudFront과 s3 버킷 연결하기\\nRoute53과 cloudFront 연결하기\\njenkins 빌드 후 조치 설정\\ncloudFront ID 연결하기\\n배포될 코드 설정 수정하기\\nfront 배포- (프론트_프로젝트) 코드 수정하기\\n젠킨스 빌드 버튼 누르기\\nsuccess가 뜨는지 확인\\ndev url로 들어가서 제대로 페이지가 나오는지 확인\\n확인 필요\\n이미 s3에 사용하려 했던 이름의 버킷이 존재한다.\\n-> 비어 있으므로 그대로 사용해도 되는지 확인해볼 것\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"위에 s3 버킷은 cloudFront 설정도 적용이 되어 있다.\"), \"\\n\", React.createElement(_components.p, null, \"Route53에 이미 사용하려 했던 레코드(url)이 존재한다.\"), \"\\n\", React.createElement(_components.p, null, \"=> S3는 객체가 비어 있으므로 그대로 사용하는 것으로 결정됨, CloudFront와 Route53은 기존 것을 지우고 새로 만들어서 연결함\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"2\"\n  }, \"\\n\", React.createElement(_components.li, null, \"어드민 페이지\\n(어드민_프로젝트) 레포지토리에 dev 브랜치 따기\\njenkins와 dev 브랜치 연결\\njenkins에서 새로운 job 생성하기\\njob 이름 - (어드민_프로젝트)-dev\\njenkins 셋팅하기\\n(어드민_프로젝트)-test job 설정 참고\\ns3 버킷 만들기\\ncloudFront과 s3 버킷 연결하기\\nRoute53과 cloudFront 연결하기\\n배포될 코드 config, package.json 파일 수정하기\\njenkins 빌드 후 조치 설정\\ncloudFront ID 연결하기\\ns3에 소스 코드 붓기\\nurl에 접속해서 확인하기\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"️ 환경별 구성 정리 (Jenkins 기준)\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"항목\"), React.createElement(_components.th, null, \"dev\"), React.createElement(_components.th, null, \"staging / production\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.strong, null, \"CI/CD\")), React.createElement(_components.td, null, \"Jenkins → EC2 SSH 접속 + \", React.createElement(_components.code, null, \"docker-compose\"), \" 배포\"), React.createElement(_components.td, null, \"Jenkins → Docker build & push → \", React.createElement(_components.code, null, \"kubectl\"), \" 또는 Helm 배포\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.strong, null, \"환경 설정\")), React.createElement(_components.td, null, React.createElement(_components.code, null, \".env.dev\"), \" 파일 사용\"), React.createElement(_components.td, null, React.createElement(_components.code, null, \"ConfigMap\"), \", \", React.createElement(_components.code, null, \"Secret\"), \", \", React.createElement(_components.code, null, \"Helm values.yaml\"), \" 로 환경 설정 분리\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.strong, null, \"관측\")), React.createElement(_components.td, null, \"EC2 내부 직접 확인 (로그, DB, curl 등)\"), React.createElement(_components.td, null, \"CloudWatch, Prometheus, Grafana 등 외부 모니터링 도구 사용\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.strong, null, \"인증\")), React.createElement(_components.td, null, \"로컬 테스트용 JWT 등 간단한 인증 로직\"), React.createElement(_components.td, null, \"Cognito 같은 외부 인증 없이 직접 JWT 발급 방식 (침고 Cognito, OAuth2, 인증 프록시 등 실서비스 인증 적용가능)\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.strong, null, \"DB 구성\")), React.createElement(_components.td, null, \"EC2 내부 Docker MySQL (dev 전용 DB)\"), React.createElement(_components.td, null, \"AWS RDS (staging DB, production DB)\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.strong, null, \"배포 빈도\")), React.createElement(_components.td, null, \"수시로 자주 배포 가능 (개발자 주도)\"), React.createElement(_components.td, null, \"승인된 변경만 배포 (PR → Merge → Jenkins 승인 배포)\")))));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/server/infra/2021-08-05-infra-jenkins-build.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h3","p","code","pre","blockquote","a","ol","li","h2","table","thead","tr","th","tbody","td","strong","_provideComponents","components","React","className","ERROR","Couldn","t","find","any","revision","to","build","Verify","the","repository","and","branch","configuration","htmlFor","this","job","href","start","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}