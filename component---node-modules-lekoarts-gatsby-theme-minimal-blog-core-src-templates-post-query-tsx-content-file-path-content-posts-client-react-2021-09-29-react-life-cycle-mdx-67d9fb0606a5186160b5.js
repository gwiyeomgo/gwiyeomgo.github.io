"use strict";(self.webpackChunkgwiyeom_blog=self.webpackChunkgwiyeom_blog||[]).push([[6941],{562:function(e,n,t){t.r(n),t.d(n,{Head:function(){return o.p},default:function(){return m}});var l=t(6540),r=t(8453);function c(e){const n=Object.assign({h1:"h1",p:"p",a:"a",blockquote:"blockquote",ul:"ul",li:"li",hr:"hr",pre:"pre",code:"code",ol:"ol",strong:"strong",em:"em",h2:"h2"},(0,r.RP)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.h1,null,"배경"),"\n",l.createElement(n.p,null,"class형태로 react코드를 프로그래밍 했었다.\nlifeCycle을 통해서 원하는 시점에 특정 기능이 동작하도록 프로그래밍 할 수 있었다.\nreact 코드에서 hooks를 사용하게 되면서 lifeCycle을 어떻게 쓸 수 있는지 궁금해 졌다.\n지금부터는 lifeCycle에 관해서 알아보고 예제를 통해 hooks을 통해 구현해 보려고 한다."),"\n",l.createElement(n.h1,null,l.createElement(n.a,{href:"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/"},"Lifecycle methods")," ?"),"\n",l.createElement(n.blockquote,null,"\n",l.createElement(n.p,null,l.createElement(n.a,{href:"https://en.wikipedia.org/wiki/React_(JavaScript_library)#Lifecycle_methods"},"Lifecycle methods")," use a form of ",l.createElement(n.a,{href:"https://en.wikipedia.org/wiki/Hooking"},"hooking")," that allows the execution of code at set points during a component's lifetime."),"\n"),"\n",l.createElement(n.p,null,"라이프사이클 메서드는 구성 요소의 수명 동안 설정된 지점에서 코드를 실행할 수 있는 후크 형식을 사용합니다."),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,l.createElement(n.a,{href:"https://react.vlpt.us/basic/25-lifecycle.html"},"컴포넌트가 브라우저상에 나타나고, 업데이트되고, 사라지게 될 때 호출되는 메서드들")),"\n",l.createElement(n.li,null,l.createElement(n.a,{href:"https://react.vlpt.us/basic/24-class-component.html"},"클래스형 컴포넌트"),"에서만 사용"),"\n"),"\n",l.createElement(n.h1,null,"왜 사용?"),"\n",l.createElement(n.p,null,"프로그래밍을 하면서 특정 시점에 코드를 수행해야 할 때 사용할 수 있습니다."),"\n",l.createElement(n.h1,null,l.createElement(n.a,{href:"https://miro.medium.com/max/2000/1*rrl7MQc41h5ElkLmMTdSUA.jpeg"},"React 16.4 Life Cycle")),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"life cycle은 업데이트 된다.\nWhy need to update to new LifeCycle?"),"\n"),"\n",l.createElement(n.hr),"\n",l.createElement(n.h1,null,"Mounting(생성)"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"These methods are called in the following order when an instance of a component is being created and inserted into the DOM:\n")),"\n",l.createElement(n.ol,null,"\n",l.createElement(n.li,null,"\n",l.createElement(n.p,null,l.createElement(n.strong,null,l.createElement(n.a,{href:"https://reactjs.org/docs/react-component.html#constructor"},"constructor"))),"\n",l.createElement(n.p,null,l.createElement(n.em,null,"생성자 메서드,컴포넌트가 만들어지면 가장 먼저 실행")),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"If you don’t initialize state and you don’t bind methods, you don’t need to implement a constructor for your React component."),"\n",l.createElement(n.li,null,"You",l.createElement("b",null,"should not call ",l.createElement(n.code,null,"setState()")," in the ",l.createElement(n.code,null,"constructor()"),".Instead, if your component needs to use local state, ",l.createElement("b",null,"assign the initial state to ",l.createElement(n.code,null,"this.state"))," directly in the constructor:")),"\n"),"\n"),"\n",l.createElement(n.li,null,"\n",l.createElement(n.p,null,l.createElement(n.strong,null,"render")),"\n",l.createElement(n.p,null,l.createElement(n.em,null,"데이터가 변경되어 새 화면을 그려야 할 때 자동으로 호출")),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"함수형 컴포넌트는 render함수를 쓰지 않는다."),"\n"),"\n"),"\n",l.createElement(n.li,null,"\n",l.createElement(n.p,null,l.createElement(n.strong,null,"componentDidMount")),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"componentDidMount() is invoked immediately after a component is mounted\n",l.createElement(n.em,null,"render 함수가 JSX를 화면에 그린 후 호출")),"\n"),"\n"),"\n",l.createElement(n.li,null,"\n",l.createElement(n.p,null,l.createElement(n.strong,null,"getDerivedStateFromProps")),"\n",l.createElement(n.p,null,l.createElement(n.em,null,"props 로 받아온 state 에 값을 넣어주고 싶을 때 사용")),"\n"),"\n"),"\n",l.createElement(n.h1,null,"Updating :컴포넌트가 다시 렌더링 될 때 순차적으로 호출"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"An update can be caused by changes to props or state. These methods are called in the following order when a component is being re-rendered:\n")),"\n",l.createElement(n.ol,null,"\n",l.createElement(n.li,null,"\n",l.createElement(n.p,null,l.createElement(n.strong,null,"render")),"\n",l.createElement(n.h2,null,l.createElement(n.a,{href:"https://reactjs.org/docs/react-component.html#render"},"render")),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"render 함수는 오직 클레스 컴포넌트에서 요청된다"),"\n",l.createElement(n.li,null,"render 함수는 꺠끗하게 유지해야만 한다 그 의미는 그것은 수정하지 않는다 컴포넌트 상태를 ,그것은 반환한다 같은 결과를 그것이 호출되는 매시간 그리고 그것은 직접적으로 상호작용하지 않는다 브라우저에"),"\n",l.createElement(n.li,null,"만약 브라우저와 상호작용이 필요하다면 수행해라 당신의 작업을 ",l.createElement(n.code,null,"componentDidMount() ")," 나 다른 ",l.createElement(n.code,null,"lifecycle methods"),"를 대신에."),"\n",l.createElement(n.li,null,l.createElement(n.code,null," shouldComponentUpdate()")," 이 ",l.createElement(n.code,null,"false"),"를 반환한다면 render()는 호출되지 않을 거다"),"\n"),"\n"),"\n",l.createElement(n.li,null,"\n",l.createElement(n.p,null,l.createElement(n.strong,null,"componentDidUpdate")),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"componentDidUpdate() is invoked immediately after updating occurs.\n",l.createElement(n.em,null,"리렌더링을 완료한 후 실행")),"\n"),"\n"),"\n",l.createElement(n.li,null,"\n",l.createElement(n.p,null,l.createElement(n.strong,null,"getDerivedStateFromProps")),"\n"),"\n",l.createElement(n.li,null,"\n",l.createElement(n.p,null,l.createElement(n.strong,null,"shouldComponentUpdate(nextProps,nextState)")),"\n",l.createElement(n.p,null,l.createElement(n.em,null,"true나 false를 반환해 리렌더링을 결정")),"\n",l.createElement(n.ol,null,"\n",l.createElement(n.li,null,l.createElement(n.em,null,"(기존 props,state값과 달라짐) props,state가 변경 되었을때")),"\n",l.createElement(n.li,null,l.createElement(n.em,null,"부모 컴포넌트가 렌더링 되었을때")),"\n"),"\n"),"\n",l.createElement(n.li,null,"\n",l.createElement(n.p,null,l.createElement(n.strong,null,"getSnapshotBeforeUpdate")),"\n",l.createElement(n.p,null,l.createElement(n.em,null,"render에서 만들어진 결과가 브라우저에 실제로 반영되기 직전에 호출")),"\n"),"\n"),"\n",l.createElement(n.h1,null,"Unmounting"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"This method is called when a component is being removed from the DOM:\n")),"\n",l.createElement(n.ol,null,"\n",l.createElement(n.li,null,"\n",l.createElement(n.p,null,l.createElement(n.strong,null,"componentWillUnmount")),"\n",l.createElement(n.p,null,l.createElement(n.em,null,"컴포넌트가 DOM에서 제거될 때 호출")),"\n"),"\n"),"\n",l.createElement(n.hr),"\n",l.createElement(n.h1,null,"리액트 Hooks를 활용하여 라이프 사이클을 구현?"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,l.createElement(n.strong,null,"componentDidMount,")),"\n"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-jsx"},"useEffect(() => {\n  console.log('componentDidMount ');\n}, []);//empty array\n")),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,l.createElement(n.strong,null,"componentDidUpdate")),"\n"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-jsx"},"  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    // 컴포넌트 업데이트 이후  실행\n   console.log('componentDidUpdate');\n\t console.log(count);//업데이트 된 값\n  }, [count]);\n")),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"componentWillUnmount"),"\n"),"\n",l.createElement(n.p,null,l.createElement(n.a,{href:"https://velog.io/@delilah/React-5-Component-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0"},"출처")),"\n",l.createElement(n.p,null,l.createElement(n.a,{href:"https://kyun2da.dev/react/%EB%A6%AC%EC%95%A1%ED%8A%B8-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4%EC%9D%98-%EC%9D%B4%ED%95%B4/"},"출처2"),"\n",l.createElement(n.a,{href:"https://velog.io/@jeonghoheo/React-Hooks%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%9B%85%EC%8A%A4%EC%9D%98-%EA%B8%B0%EB%B3%B8-Part-1-2jjxpaobgg"},"출처3")),"\n",l.createElement(n.h1,null,"lifecycle method 생명주기 함수"),"\n",l.createElement(n.p,null,"출생(마운트)\n컴포넌트의 constructor 생성자 실행 =>\n생성자에서 state 를 정의하게 된다.\n컴포넌트가 렌더링되며 이후에 componentDid Mount 함수 호출"),"\n",l.createElement(n.p,null,"다시 렌더링 = 업데이트 = props 가 변경되거나 setState 호출하여 state 변경,forceUpdate 강제 업데이트\n렌더링 후에는 componentDidUpdate 호출"),"\n",l.createElement(n.p,null,"사망(언마운트)\n상위 컴포넌트에서 현재 컴포넌트를 더 이상 화면에 표시하지 않게 될 때 언마운트된다\n언마운트 직전에\ncomponentWillUnmount 함수 호출\n컴포넌트가 계속 존재하는 것이 아니라 시간의 흐름에 따라\n생성되고 업데이트되다가 사라진다는 것"),"\n",l.createElement(n.h1,null,"state"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"직접 State를 수정하지 마세요"),"\n",l.createElement(n.li,null,"부모 -> 자식 으로 데이터는 아래로 흐릅니다 (단방향식)"),"\n",l.createElement(n.li,null,"컴포넌트는 자신의 state를 자식 컴포넌트에 props로 전달"),"\n"))}var a=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.RP)(),e.components);return n?l.createElement(n,e,l.createElement(c,e)):c(e)},o=t(7292);function m(e){return l.createElement(o.A,e,l.createElement(a,e))}o.A}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-client-react-2021-09-29-react-life-cycle-mdx-67d9fb0606a5186160b5.js.map