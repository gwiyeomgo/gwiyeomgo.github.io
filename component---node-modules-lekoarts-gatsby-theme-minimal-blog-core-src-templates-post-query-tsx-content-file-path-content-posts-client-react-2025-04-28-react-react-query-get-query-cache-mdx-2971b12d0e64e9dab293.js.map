{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-client-react-2025-04-28-react-react-query-get-query-cache-mdx-2971b12d0e64e9dab293.js","mappings":"kNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,IAAK,MACLC,KAAM,OACNC,MAAO,QACPC,MAAO,QACPC,GAAI,KACJC,GAAI,KACJC,MAAO,QACPC,GAAI,OACHC,EAAAA,EAAAA,MAAsBd,EAAMe,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBf,EAAYG,GAAI,KAAM,MAAO,KAAMY,EAAAA,cAAoBf,EAAYI,EAAG,KAAM,4NAA6N,KAAMW,EAAAA,cAAoBf,EAAYG,GAAI,KAAM,SAAU,KAAMY,EAAAA,cAAoBf,EAAYK,IAAK,KAAMU,EAAAA,cAAoBf,EAAYM,KAAM,KAAM,kMAAmM,KAAMS,EAAAA,cAAoBf,EAAYO,MAAO,KAAMQ,EAAAA,cAAoBf,EAAYQ,MAAO,KAAMO,EAAAA,cAAoBf,EAAYS,GAAI,KAAMM,EAAAA,cAAoBf,EAAYU,GAAI,CACp3BM,MAAO,QACN,UAAWD,EAAAA,cAAoBf,EAAYU,GAAI,CAChDM,MAAO,QACN,QAASD,EAAAA,cAAoBf,EAAYW,MAAO,KAAMI,EAAAA,cAAoBf,EAAYS,GAAI,KAAMM,EAAAA,cAAoBf,EAAYY,GAAI,CACrII,MAAO,QACND,EAAAA,cAAoBf,EAAYM,KAAM,KAAM,UAAWS,EAAAA,cAAoBf,EAAYY,GAAI,CAC5FI,MAAO,QACN,sBAAuBD,EAAAA,cAAoBf,EAAYS,GAAI,KAAMM,EAAAA,cAAoBf,EAAYY,GAAI,CACtGI,MAAO,QACND,EAAAA,cAAoBf,EAAYM,KAAM,KAAM,YAAaS,EAAAA,cAAoBf,EAAYY,GAAI,CAC9FI,MAAO,QACN,kBAAmBD,EAAAA,cAAoBf,EAAYS,GAAI,KAAMM,EAAAA,cAAoBf,EAAYY,GAAI,CAClGI,MAAO,QACND,EAAAA,cAAoBf,EAAYM,KAAM,KAAM,YAAaS,EAAAA,cAAoBf,EAAYY,GAAI,CAC9FI,MAAO,QACN,sBAAuBD,EAAAA,cAAoBf,EAAYS,GAAI,KAAMM,EAAAA,cAAoBf,EAAYY,GAAI,CACtGI,MAAO,QACND,EAAAA,cAAoBf,EAAYM,KAAM,KAAM,kBAAmBS,EAAAA,cAAoBf,EAAYY,GAAI,CACpGI,MAAO,QACN,yCAA0CD,EAAAA,cAAoBf,EAAYS,GAAI,KAAMM,EAAAA,cAAoBf,EAAYY,GAAI,CACzHI,MAAO,QACND,EAAAA,cAAoBf,EAAYM,KAAM,KAAM,oBAAqBS,EAAAA,cAAoBf,EAAYY,GAAI,CACtGI,MAAO,QACN,oBAAqBD,EAAAA,cAAoBf,EAAYS,GAAI,KAAMM,EAAAA,cAAoBf,EAAYY,GAAI,CACpGI,MAAO,QACND,EAAAA,cAAoBf,EAAYM,KAAM,KAAM,2BAA4BS,EAAAA,cAAoBf,EAAYY,GAAI,CAC7GI,MAAO,QACN,mCAAoC,KAAMD,EAAAA,cAAoBf,EAAYK,IAAK,KAAMU,EAAAA,cAAoBf,EAAYM,KAAM,KAAM,+2BACtI,CAKA,MAJA,SAAoBP,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOkB,QAASC,GAAajB,OAAOC,OAAO,CAAC,GAAGW,EAAAA,EAAAA,MAAsBd,EAAMe,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWnB,EAAOgB,EAAAA,cAAoBjB,EAAmBC,IAAUD,EAAkBC,EAC9H,E,UC7Ce,SAASoB,EAAiBpB,GACvC,OAAOgB,EAAAA,cAAoBK,EAAAA,EAAerB,EAAOgB,EAAAA,cAAoBM,EAAqBtB,GAC5F,CAHAqB,EAAAA,C","sources":["webpack://gwiyeom-blog/./content/posts/client/react/2025-04-28-react-reactQuery-getQueryCache.mdx","webpack://gwiyeom-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"프론트팀에서 react-query 를 사용중이다\\n운영,staging 환경에서 react-query 를 통해\\n어떤 점이 개선되었고 상태 변화등 알 수 있는지\\n방법이 없을지 궁금했고\\n왜 react-query를 썼는지 뭐가 좋은 건지 알고 싶었다..\\nreact-query 를 쓰면\\nQuery 상태 변화 이벤트를 구독해서\\n로깅하거나 별도 처리도 가능하다고 해서\\n한번 기록해봅니다.\"), \"\\n\", React.createElement(_components.h1, null, \"사용 예시\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"export interface QueryCacheNotifyEvent {\\n  type: 'added' | 'removed' | 'updated' | 'observerAdded' | 'observerRemoved' | 'observerResultsUpdated';\\n  query: Query<any, any, any, any>;\\n}\\n\")), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, {\n    align: \"left\"\n  }, \"type 값\"), React.createElement(_components.th, {\n    align: \"left\"\n  }, \"의미\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, {\n    align: \"left\"\n  }, React.createElement(_components.code, null, \"added\")), React.createElement(_components.td, {\n    align: \"left\"\n  }, \"새로운 Query가 추가됐을 때\")), React.createElement(_components.tr, null, React.createElement(_components.td, {\n    align: \"left\"\n  }, React.createElement(_components.code, null, \"removed\")), React.createElement(_components.td, {\n    align: \"left\"\n  }, \"Query가 삭제됐을 때\")), React.createElement(_components.tr, null, React.createElement(_components.td, {\n    align: \"left\"\n  }, React.createElement(_components.code, null, \"updated\")), React.createElement(_components.td, {\n    align: \"left\"\n  }, \"Query 데이터가 변경됐을 때\")), React.createElement(_components.tr, null, React.createElement(_components.td, {\n    align: \"left\"\n  }, React.createElement(_components.code, null, \"observerAdded\")), React.createElement(_components.td, {\n    align: \"left\"\n  }, \"이 Query를 구독하는 컴포넌트(observer)가 추가됐을 때\")), React.createElement(_components.tr, null, React.createElement(_components.td, {\n    align: \"left\"\n  }, React.createElement(_components.code, null, \"observerRemoved\")), React.createElement(_components.td, {\n    align: \"left\"\n  }, \"observer가 빠졌을 때\")), React.createElement(_components.tr, null, React.createElement(_components.td, {\n    align: \"left\"\n  }, React.createElement(_components.code, null, \"observerResultsUpdated\")), React.createElement(_components.td, {\n    align: \"left\"\n  }, \"observer가 보고 있는 결과가 업데이트됐을 때\")))), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"import { useEffect } from 'react';\\nimport { useQueryClient } from '@tanstack/react-query';\\nimport type { QueryCacheNotifyEvent } from '@tanstack/react-query';\\n\\nfunction QueryLogger() {\\n  const queryClient = useQueryClient();\\n\\n  useEffect(() => {\\n    const unsubscribe = queryClient.getQueryCache().subscribe((event: QueryCacheNotifyEvent) => {\\n      console.log('Query event:', event);\\n\\n      if (event.type === 'updated' && event.query) {\\n        const fetchStatus = event.query.state.fetchStatus;\\n        const fetchTime = event.query.state.dataUpdatedAt;\\n        const queryKey = event.query.queryKey;\\n\\n        // 여기서 원하는 로깅 서버로 POST 요청 보내기\\n        // sendLogToServer({ fetchStatus, fetchTime, queryKey });\\n      }\\n    });\\n\\n    return () => {\\n      unsubscribe();\\n    };\\n  }, [queryClient]);\\n\\n  return null;\\n}\\n\\nexport default QueryLogger;\\n\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/gwiyeomgo.github.io/gwiyeomgo.github.io/content/posts/client/react/2025-04-28-react-reactQuery-getQueryCache.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","pre","code","table","thead","tr","th","tbody","td","_provideComponents","components","React","align","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}